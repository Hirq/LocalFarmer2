@page "/addproduct"
@inject IProductService ProductService
@inject IAlertService AlertService
@inject IFavoriteFarmhouseService FavoriteFarmhouseService
@inject UtilsService UtilsService
@inject NavigationManager NavigationManager
@inject UserStateService UserStateService

<PageTitle>Add product</PageTitle>

<EditForm Model="product" OnValidSubmit="OnValidSubmit">
    <DataAnnotationsValidator />
    <MudText Class="d-flex justify-center" Typo="Typo.h6">Add product</MudText>
    <MudGrid>
        <MudItem xs="12">
            <MudCard>
                <MudCardContent>
                    <MudTextField Label="Name product"
                                  @bind-Value="product.Name" Required For="@(() => product.Name)" />
                    <MudTextField Label="Description"
                                  @bind-Value="product.Description" Required For="@(() => product.Description)"/>
                    <MudTextField Label="Count min"
                                  @bind-Value="product.CountMinOne" Required For="@(() => product.CountMinOne)" />
                    <MudTextField Label="Prize for one"
                                  @bind-Value="product.PrizeOne" Required For="@(() => product.PrizeOne)" />
                    <MudTextField Label="Count all"
                                  @bind-Value="product.CountAll" Required For="@(() => product.CountAll)" />
                     <InputFile OnChange="HandleFileSelected" />
                </MudCardContent>
                <MudCardActions>
                    <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto">Add product</MudButton>
                </MudCardActions>
            </MudCard>
        </MudItem>
    </MudGrid>
</EditForm>

 @code {
    ProductDto product = new ProductDto();
    //TODO: Jeżeli nie wypełnione to cofnąć

    private async void OnValidSubmit(EditContext context)
    {
        await ProductService.AddProduct(product, (int)UserStateService.CurrentUser.IdFarmhouse);

        //Alerts
        var listUsersIds = await FavoriteFarmhouseService.GetFavoriteFarmhouseUsersIds((int)UserStateService.CurrentUser.IdFarmhouse);
        var messageAlert = new MessageAlert(MessageAlertEnum.NewProduct, UserStateService.CurrentUser.FarmhouseName, product.Name);
        await AlertService.AddAlerts(listUsersIds, (int)UserStateService.CurrentUser.IdFarmhouse, true, messageAlert);

        AlertService.SetSuccessAlert($"Successfully add product {product.Name}");
        NavigationManager.NavigateTo("/myproducts");
    }

    private async Task HandleFileSelected(InputFileChangeEventArgs e)
    {
        var file = e.File;

        if (file != null)
        {
            var buffer = new byte[file.Size];
            await file.OpenReadStream().ReadAsync(buffer);

            product.ImageData = buffer;
            product.ImageMimeType = file.ContentType;
        }
    }
}
