@page "/editproduct/{id:int}"
@inject IProductService ProductService
@inject IMapper mapper
@inject IAlertService AlertService
@inject IFavoriteFarmhouseService FavoriteFarmhouseService
@inject NavigationManager NavigationManager
@inject UserStateService UserStateService
@inject FileService FileService

<PageTitle>Edit product</PageTitle>

<EditForm Model="model" OnValidSubmit="OnValidSubmit">
    <DataAnnotationsValidator />
    <MudText Class="d-flex justify-center" Typo="Typo.h6">Edit product</MudText>
    <MudGrid>
        <MudItem xs="12">
            <MudCard>
                <MudCardContent>
                    <MudTextField Label="Name product"
                                  @bind-Value="model.Name" Required For="@(() => model.Name)"/>
                    <MudTextField Label="Description"
                                  @bind-Value="model.Description" Required For="@(() => model.Description)" />
                    <MudTextField Label="Count min"
                                  @bind-Value="model.CountMinOne" Required For="@(() => model.CountMinOne)" />
                    <MudTextField Label="Prize for one"
                                  @bind-Value="model.PrizeOne" Required For="@(() => model.PrizeOne)" />
                    <MudTextField Label="Count all"
                                  @bind-Value="model.CountAll" Required For="@(() => model.CountAll)" />

                     <MudText Typo="Typo.h6">Photo product</MudText>
                     <MudFileUpload T="IBrowserFile" OnFilesChanged="(e) => FileService.OnInputFileChanged(e, model)" Context="fileInput">
                         <ButtonTemplate>
                             @if (@FileService.fileNames != null)
                            {
                                @foreach (var file in FileService.fileNames)
                                {
                                    <MudListItem Icon="@Icons.Material.Filled.AttachFile" @key="@file">
                                        <MudChip Color="Color.Dark" Text="@file" />
                                    </MudListItem>
                                }
                            }
                            <MudToolBar DisableGutters="true">
                                <MudButton HtmlTag="label"
                                           Color="Color.Primary"
                                           for="@fileInput"
                                           Variant="Variant.Filled">
                                    Open file picker
                                </MudButton>
                                <MudButton OnClick="(e) => FileService.Clear(model)"
                                           Color="Color.Error"
                                           Disabled="@(!FileService.fileNames.Any())"
                                           Variant="Variant.Filled">
                                    Clear
                                </MudButton>
                            </MudToolBar>
                        </ButtonTemplate>
                    </MudFileUpload>

                </MudCardContent>
                <MudCardActions>
                    <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto">Edit product</MudButton>
                </MudCardActions>
            </MudCard>
        </MudItem>
    </MudGrid>
</EditForm>

@code {
    [Parameter]
    public int Id { get; set; }

    ProductDto model = new ProductDto();

    protected override async Task OnParametersSetAsync()
    {
        var product = await ProductService.GetProduct(Id);
        model = mapper.Map<ProductDto>(product);

        if (model.ImageData != null && !string.IsNullOrEmpty(model.ImageMimeType))
        {
            //TODO: Zapisać nazwę tego zdjęcia do bazy - lub w jakiś inny sposób poinformować o tym, że zdjęcie jest ustawione
            FileService.fileNames.Add("Image for product is set");
        }
    }

    private async void OnValidSubmit(EditContext context)
    {
        ProductDto product = mapper.Map<ProductDto>(model);
        await ProductService.EditProduct(product, Id);

        //Alerts
        var listUsersIds = await FavoriteFarmhouseService.GetFavoriteFarmhouseUsersIds((int)UserStateService.CurrentUser.IdFarmhouse);
        var messageAlert = new MessageAlert(MessageAlertEnum.EditProduct, UserStateService.CurrentUser.FarmhouseName, product.Name);
        await AlertService.AddAlerts(listUsersIds, (int)UserStateService.CurrentUser.IdFarmhouse, true, messageAlert);

        AlertService.SetSuccessAlert($"Successfully edited product {model.Name}");
        NavigationManager.NavigateTo("/myproducts");
    }
}
