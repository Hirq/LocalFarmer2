@page "/editproduct/{id:int}"
@inject IProductService ProductService
@inject IMapper mapper
@inject IAlertService AlertService
@inject IFavoriteFarmhouseService FavoriteFarmhouseService
@inject NavigationManager NavigationManager
@inject UserStateService UserStateService
@inject FileService FileService

<PageTitle>@loc["Product_Edit_Product"] | @Globals.AppName</PageTitle>

<EditForm Model="model" OnValidSubmit="OnValidSubmit">
    <DataAnnotationsValidator />
    <MudText Class="d-flex justify-center" Typo="Typo.h6">@loc["Product_Edit_Product"]</MudText>
    <MudGrid>
        <MudItem xs="12">
            <MudCard>
                <MudCardContent>
                    <MudTextField Label="@loc["X_Name"]" @bind-Value="model.Name" Required For="@(() => model.Name)" />
                    <MudTextField Label="@loc["X_Description"]" @bind-Value="model.Description" Required For="@(() => model.Description)" />
                    <MudTextField Label="@loc["Product_Minimal_Amount"]" @bind-Value="model.CountMinOne" Required For="@(() => model.CountMinOne)" />
                    <MudTextField Label="@loc["Product_Prize_One"]" @bind-Value="model.PrizeOne" Required For="@(() => model.PrizeOne)" />
                    <MudTextField Label="@loc["Product_Total_Quantity"]" @bind-Value="model.CountAll" Required For="@(() => model.CountAll)" />
                    <EditFile Name="@loc["Product_Photo"]" Model="@model" />
                </MudCardContent>
            </MudCard>
            <MudCardActions>
                <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary">@loc["Product_Edit_Product"]</MudButton>
            </MudCardActions>
        </MudItem>
    </MudGrid>
</EditForm>

@code {
    [Parameter]
    public int Id { get; set; }

    ProductDto model = new ProductDto();

    protected override async Task OnParametersSetAsync()
    {
        var product = await ProductService.GetProduct(Id);
        model = mapper.Map<ProductDto>(product);

        if (model.ImageData != null && !string.IsNullOrEmpty(model.ImageMimeType))
        {
            FileService.SetName($"{loc["Farmhouse_ImageIsSet"]}");
        }
    }

    private async void OnValidSubmit(EditContext context)
    {
        ProductDto product = mapper.Map<ProductDto>(model);
        await ProductService.EditProduct(product, Id);

        //Alerts
        var listUsersIds = await FavoriteFarmhouseService.GetFavoriteFarmhouseUsersIds((int)UserStateService.CurrentUser.IdFarmhouse);
        var messageAlert = new MessageAlert(MessageAlertEnum.EditProduct, UserStateService.CurrentUser.FarmhouseName, product.Name);
        await AlertService.AddAlerts(listUsersIds, (int)UserStateService.CurrentUser.IdFarmhouse, true, messageAlert);

        AlertService.SetSuccessAlert($"{@loc["Alert_Successfully"]} {@loc["Alert_Edit_Product"]} {model.Name}");
        NavigationManager.NavigateTo("/myproducts");
        _ = AlertService.ClearAlertAfterDelay();
    }
}
