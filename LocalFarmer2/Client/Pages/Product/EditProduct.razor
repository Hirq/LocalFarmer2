@page "/editproduct/{id:int}"
@inherits BasePage
@using System.Text.Json
@inject IProductService ProductService
@inject IMapper mapper
@inject IAlertService AlertService
@inject IFavoriteFarmhouseService FavoriteFarmhouseService
@inject NavigationManager NavigationManager
@inject UserStateService UserStateService
@inject FileService FileService

<PageTitle>@loc["Product_Edit_Product"] | @Globals.AppName</PageTitle>

@if (isLoading)
{
    <MudProgressCircular Class="m-4" Color="Color.Primary" />
}
else if (!string.IsNullOrEmpty(errorMessage))
{
    <MudAlert Severity="Severity.Error">@errorMessage</MudAlert>
}
else
{
    <EditForm Model="productDto" OnValidSubmit="OnValidSubmit">
        <DataAnnotationsValidator />
        <MudText Class="d-flex justify-center" Typo="Typo.h6">@loc["Product_Edit_Product"]</MudText>
        <MudGrid>
            <MudItem xs="12">
                <MudCard>
                    <MudCardContent>
                        <MudTextField Label="@loc["X_Name"]" @bind-Value="productDto.Name" Required For="@(() => productDto.Name)" />
                        <MudTextField Label="@loc["X_Description"]" @bind-Value="productDto.Description" Required For="@(() => productDto.Description)" />
                        <MudTextField Label="@loc["Product_Minimal_Amount"]" @bind-Value="productDto.CountMinOne" Required For="@(() => productDto.CountMinOne)" />
                        <MudTextField Label="@loc["Product_Prize_One"]" @bind-Value="productDto.PrizeOne" Required For="@(() => productDto.PrizeOne)" />
                        <MudTextField Label="@loc["Product_Total_Quantity"]" @bind-Value="productDto.CountAll" Required For="@(() => productDto.CountAll)" />
                        <EditFile Name="@loc["Product_Photo"]" Model="@productDto" />
                    </MudCardContent>
                </MudCard>
                <MudCardActions>
                    <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary">@loc["Product_Edit_Product"]</MudButton>
                </MudCardActions>
            </MudItem>
        </MudGrid>
    </EditForm>
}

@code {
    [Parameter]
    public int Id { get; set; }

    private ProductDto productDto = new ProductDto();
    private ProductDto originalProductDto = new ProductDto();

    protected override async Task LoadDataAsync()
    {
        if (!await EnsureLoggedInAsync())
        {
            return;
        }
    }

    protected override async Task OnParametersSetAsync()
    {
        if (HasError)
        {
            return;
        }

        var product = await ProductService.GetProduct(Id);
        productDto = mapper.Map<ProductDto>(product);
        originalProductDto = mapper.Map<ProductDto>(product);

        if (productDto.ImageData != null && !string.IsNullOrEmpty(productDto.ImageMimeType))
        {
            FileService.SetName($"{loc["Farmhouse_ImageIsSet"]}");
        }
    }

    private async void OnValidSubmit(EditContext context)
    {
        var currentJson = JsonSerializer.Serialize(productDto);
        var originalJson = JsonSerializer.Serialize(originalProductDto);

        if (currentJson == originalJson)
        {
            NavigationManager.NavigateTo("/myproducts");
            return;
        }

        await ProductService.EditProduct(productDto, Id);

        //Alerts
        var listUsersIds = await FavoriteFarmhouseService.GetFavoriteFarmhouseUsersIds((int)UserStateService.CurrentUser.IdFarmhouse);
        var messageAlert = new MessageAlert(MessageAlertEnum.EditProduct, UserStateService.CurrentUser.FarmhouseName, productDto.Name);
        await AlertService.AddAlerts(listUsersIds, (int)UserStateService.CurrentUser.IdFarmhouse, true, messageAlert);

        AlertService.SetSuccessAlert($"{@loc["Alert_Successfully"]} {@loc["Alert_Edit_Product"]} {productDto.Name}");
        NavigationManager.NavigateTo("/myproducts");
        _ = AlertService.ClearAlertAfterDelay();
    }
}
