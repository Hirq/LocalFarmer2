@page "/product/{id:int}"
@inject IProductService ProductService

<PageTitle>Product</PageTitle>

<h2>TODO / albo usunąć detail - bo co tutaj dać to samo co w tabeli + zdjęcie jakiś schemat przygotować pod to CARD i na do przełącznik do kolejnego elementu od nich oraz do farmhouse - na widoku farmhouse powinno być przejśćie do wszystkich produktów teog farmhouse</h2>
<h2> A tu dla tego widoku zrobić jak na zdjęciu z pulpitu - rozwijane zakładki z informacjami + 2 kolumny NAME Z DB | Wartość </h2>
<h2> Może zrobić dla produkty farmhouse jako tabele lub jako zakładki np 4 kolumny - czyli 4 CARD i w kazdej mały opis ze zdjęciem i dostępny przełącznik od widoku</h2>
<h2>@product.Name - @product.Id</h2>

<div class="d-flex flex-grow-1 gap-4">
    <div class="flex-none d-flex fw-bolder py-1"> @loc["X_Name"] </div>
    <div class="flex-initial d-flex py-1"> @product.Name </div>
</div>
<div class="d-flex flex-grow-1 gap-4">
    <div class="flex-none d-flex fw-bolder py-1"> @loc["X_Description"] </div>
    <div class="flex-initial d-flex py-1"> @product.Description </div>
</div>
<div class="d-flex flex-grow-1 gap-4">
    <div class="flex-none d-flex fw-bolder py-1"> @loc["Product_Minimal_Amount"] </div>
    <div class="flex-initial d-flex py-1"> @product.CountMinOne </div>
</div>
<div class="d-flex flex-grow-1 gap-4">
    <div class="flex-none d-flex fw-bolder py-1"> @loc["Product_Prize_One"] </div>
    <div class="flex-initial d-flex py-1"> @product.PrizeOne </div>
</div>
<div class="d-flex flex-grow-1 gap-4">
    <div class="flex-none d-flex fw-bolder py-1"> @loc["Product_Total_Quantity"] </div>
    <div class="flex-initial d-flex py-1"> @product.CountAll </div>
</div>

@if (product.ImageData != null && !string.IsNullOrEmpty(product.ImageMimeType))
{
    <MudPaper Class="pa-4">
        <MudStack Spacing="2">
            <MudButton OnClick="OnExpandCollapseClick">@(_expanded ? @loc["Button_Hide_Photo"] : @loc["Button_Show_Photo"])</MudButton>
            <MudDivider />
            <MudCollapse Expanded="_expanded">
                <img src="@($"data:{product.ImageMimeType};base64,{Convert.ToBase64String(product.ImageData)}")" alt="Product Image" />
            </MudCollapse>
        </MudStack>
    </MudPaper>
}

@code {
    [Parameter]
    public int Id { get; set; }
    private bool _expanded = false;
    Product product = new Product();

    private void OnExpandCollapseClick()
    {
        _expanded = !_expanded;
    }

    protected override async Task OnParametersSetAsync()
    {
        if (Id != 0)
        {
            product = await ProductService.GetProduct(Id);
        }
    }
}
