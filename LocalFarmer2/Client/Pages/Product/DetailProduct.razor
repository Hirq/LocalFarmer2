@page "/product/{id:int}"
@inject IProductService ProductService
@inject NavigationManager NavigationManager

<PageTitle>Product</PageTitle>

<h2> A tu dla tego widoku zrobić jak na zdjęciu z pulpitu - rozwijane zakładki z informacjami + 2 kolumny NAME Z DB | Wartość </h2>
<MudButton Class="product-details-button" Variant="Variant.Filled" Color="Color.Primary" OnClick="ShowFarmhouse">@loc["X_Farmhouse"] - przenieś na 2 stronę do rogu coś jak w edytuj farmhouse </MudButton>

<MudPaper Class="pa-4">
    <MudStack Spacing="2">
        <MudButton Class="product-details-button" Variant="Variant.Outlined" Color="Color.Primary" OnClick="OnExpandCollapsePrimary">@(_expandedPrimary ? @loc["Button_Basic_Info"] : @loc["Button_Basic_Info"])</MudButton>
        <MudCollapse Expanded="_expandedPrimary">
            <MudGrid>
                <MudItem xs="1">
                    <div class="fw-bolder"> @loc["X_Name"] </div>
                </MudItem>
                <MudItem xs="11">
                    @product.Name
                </MudItem>
                <MudItem xs="1">
                    <div class="fw-bolder"> @loc["X_Description"] </div>
                </MudItem>
                <MudItem xs="11">
                    @product.Description
                </MudItem>
            </MudGrid>
        </MudCollapse>
        <MudButton Class="product-details-button" Variant="Variant.Outlined" Color="Color.Primary" OnClick="OnExpandCollapsePrice">@(_expandedPrice ? @loc["Button_Prize_Info"] : @loc["Button_Prize_Info"])</MudButton>
        <MudCollapse Expanded="_expandedPrice">
            <MudGrid>
                <MudItem xs="1">
                    <div class="fw-bolder"> @loc["Product_Minimal_Amount"] </div>
                </MudItem>
                <MudItem xs="11">
                    @product.CountMinOne
                </MudItem>
                <MudItem xs="1">
                    <div class="fw-bolder"> @loc["Product_Prize_One"] </div>
                </MudItem>
                <MudItem xs="11">
                    @product.PrizeOne
                </MudItem>
                <MudItem xs="1">
                    <div class="fw-bolder"> @loc["Product_Total_Quantity"] </div>
                </MudItem>
                <MudItem xs="11">
                    @product.CountAll
                </MudItem>
            </MudGrid>
        </MudCollapse>
        @if (product.ImageData != null && !string.IsNullOrEmpty(product.ImageMimeType))
        {
            <MudButton Class="product-details-button" Variant="Variant.Outlined" Color="Color.Primary" OnClick="OnExpandCollapsePhoto">@(_expandedPhoto ? @loc["Button_Hide_Photo"] : @loc["Button_Show_Photo"])</MudButton>
            <MudCollapse Expanded="_expandedPhoto">
                <img src="@($"data:{product.ImageMimeType};base64,{Convert.ToBase64String(product.ImageData)}")" alt="Product Image" />
            </MudCollapse>
        }
        <MudButton Class="product-details-button" Variant="Variant.Outlined" Color="Color.Primary" OnClick="OnExpandCollapseOtherProducts">@(_expandedOtherProducts ? @loc["Button_Other_Products"] : @loc["Button_Other_Products"])</MudButton>
        <MudCollapse Expanded="_expandedOtherProducts">
            <MudGrid>
                <MudItem xs="3">
                    <MudCard Outlined="true">
                        <MudCardContent>
                            <MudText>Story of the day</MudText>
                            <MudText Typo="Typo.body2">The quick, brown fox jumps over a lazy dog.</MudText>
                        </MudCardContent>
                        <MudCardActions>
                            <MudButton Variant="Variant.Text" Color="Color.Primary">Learn More</MudButton>
                        </MudCardActions>
                    </MudCard>
                </MudItem>
                <MudItem xs="3">
                    <MudCard Outlined="true">
                        <MudCardContent>
                            <MudText>Story of the day</MudText>
                            <MudText Typo="Typo.body2">The quick, brown fox jumps over a lazy dog.</MudText>
                        </MudCardContent>
                        <MudCardActions>
                            <MudButton Variant="Variant.Text" Color="Color.Primary">Learn More</MudButton>
                        </MudCardActions>
                    </MudCard>
                </MudItem>
                <MudItem xs="3">
                    <MudCard Outlined="true">
                        <MudCardContent>
                            <MudText>Story of the day</MudText>
                            <MudText Typo="Typo.body2">The quick, brown fox jumps over a lazy dog.</MudText>
                        </MudCardContent>
                        <MudCardActions>
                            <MudButton Variant="Variant.Text" Color="Color.Primary">Learn More</MudButton>
                        </MudCardActions>
                    </MudCard>
                </MudItem>
                <MudItem xs="3">
                    <MudCard Outlined="true">
                        <MudCardContent>
                            <MudText>Story of the day</MudText>
                            <MudText Typo="Typo.body2">The quick, brown fox jumps over a lazy dog.</MudText>
                        </MudCardContent>
                        <MudCardActions>
                            <MudButton Variant="Variant.Text" Color="Color.Primary">Learn More</MudButton>
                        </MudCardActions>
                    </MudCard>
                </MudItem>
                <MudItem xs="12">
                    <MudButton Class="product-details-button" Variant="Variant.Filled" Color="Color.Primary" OnClick="ShowAllProducts">@loc["Button_All_Products"]</MudButton>
                </MudItem>
            </MudGrid>
        </MudCollapse>
    </MudStack>
</MudPaper>



@code {
    [Parameter]
    public int Id { get; set; }
    private bool _expandedPhoto = false;
    private bool _expandedPrimary = false;
    private bool _expandedPrice = false;
    private bool _expandedOtherProducts = false;
    Product product = new Product();

    private void OnExpandCollapsePhoto()
    {
        _expandedPhoto = !_expandedPhoto;
    }

    private void OnExpandCollapsePrimary()
    {
        _expandedPrimary = !_expandedPrimary;
    }

    private void OnExpandCollapsePrice()
    {
        _expandedPrice = !_expandedPrice;
    }

    private void OnExpandCollapseOtherProducts()
    {
        _expandedOtherProducts = !_expandedOtherProducts;
    }

    private void ShowAllProducts()
    {
        NavigationManager.NavigateTo($"productsFarmhouse/{product.IdFarmhouse}");
    }

    private void ShowFarmhouse()
    {
        NavigationManager.NavigateTo($"farmhouse/{product.IdFarmhouse}");
    }

    protected override async Task OnParametersSetAsync()
    {
        if (Id != 0)
        {
            product = await ProductService.GetProduct(Id);
        }
    }
}
