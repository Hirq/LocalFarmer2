@page "/myopinionsfarmhouses"
@inject IOpinionService OpinionService
@inject IMapper Mapper
@inject IAlertService AlertService
@inject UserStateService UserStateService

<PageTitle>@loc["Dashboard_My_Opinions"]</PageTitle>

<MudTable Items="@ListMyOpinionsFarmhouse" SortLabel="Sort By" Hover="true" Filter="new Func<Opinion,bool>(FilterFunc)" CommitEditTooltip="Commit Edit">
    <ToolBarContent>
            <MudText Typo="Typo.h6">@loc["Dashboard_My_Opinions"]</MudText>
        <MudSpacer />
        <MudTextField @bind-Value="searchString" Placeholder="@loc["X_Search"]" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
    </ToolBarContent> 

    <HeaderContent>
        <MudTh><MudTableSortLabel InitialDirection="SortDirection.Ascending" SortBy="new Func<Opinion, object>(x=>x.Id)">Id</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel InitialDirection="SortDirection.Ascending" SortBy="new Func<Opinion, object>(x=>x.IdFarmhouse)">Id @loc["X_Farmhouse"]</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel InitialDirection="SortDirection.Ascending" SortBy="new Func<Opinion, object>(x=>x.Farmhouse.Name)">@loc["X_Farmhouse"]</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel InitialDirection="SortDirection.Ascending" SortBy="new Func<Opinion, object>(x=>x.Comment)">@loc["Opinion_Comment"]</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel InitialDirection="SortDirection.Ascending" SortBy="new Func<Opinion, object>(x=>x.Rating)">@loc["Opinion_Rating"]</MudTableSortLabel></MudTh>
        <MudTh>@loc["X_Action"]</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Nr">@context.Id</MudTd>
        <MudTd DataLabel="Nr">@context.IdFarmhouse</MudTd>
        <MudTd DataLabel="Nr">@context.Farmhouse.Name</MudTd>
        <MudTd DataLabel="Nr">@context.Comment</MudTd>
        <MudTd DataLabel="Nr">@context.Rating</MudTd>
        <MudTd DataLabel="Edit">
            <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="() => DeleteOpinion(context.Id)">@loc["X_Delete"]</MudButton>
            <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="() => OpenMessageBoxEditOpinion(context.Id)">@loc["X_Edit"]</MudButton>
            <MudMessageBox @ref="mbox" Title="Edit opinion" CancelText="Cancel">
                <MessageContent>
                    <div class="d-flex flex-column align-center">
                        <MudRating @bind-SelectedValue="opinionDto.Rating" />
                        <MudText Typo="Typo.subtitle2" Class="deep-purple-text mt-2">@loc["Opinion_Your_OpinionYour"]</MudText>
                    </div>
                    <MudTextField T="string" @bind-Value="opinionDto.Comment" Label="@loc["Opinion_Comment"]" Variant="Variant.Outlined" Lines="3" Placeholder="@loc["Opinion_Placeholder"]" />
                </MessageContent>
                <YesButton>
                    <MudButton Variant="Variant.Filled" Color="Color.Primary" StartIcon="@Icons.Material.Filled.AddBox" OnClick="() => EditOpinion(context.Id)">@loc["X_Edit"]</MudButton>
                </YesButton>
            </MudMessageBox>
        </MudTd>
        </RowTemplate>
    <PagerContent>
        <MudTablePager RowsPerPageString="@loc["Table_Rows_Per_Page"]" PageSizeOptions="new int[]{50, 100}" />
    </PagerContent>
</MudTable>



    @code {
    List<Opinion> ListMyOpinionsFarmhouse = new List<Opinion>();
    private string searchString = null;
    private string userId = null;
    MudMessageBox mbox { get; set; }
    EditOpinionDto opinionDto { get; set; }

    protected override async Task OnInitializedAsync()
    {
        userId = UserStateService.CurrentUser.IdUser;
        ListMyOpinionsFarmhouse = await OpinionService.GetOpinionFarmhousesForUser(userId);
    }

    private async void DeleteOpinion(int idOpinion)
    {
        var opinion = ListMyOpinionsFarmhouse.FirstOrDefault(x => x.Id == idOpinion);
        if (opinion != null)
        {
            await OpinionService.DeleteOpinion(opinion.Id);
            ListMyOpinionsFarmhouse.Remove(opinion);
            StateHasChanged();
            AlertService.SetDeleteAlert($"Deleted opinion about farmhouse {opinion.Farmhouse.Name}");
        }
    }

    private async void OpenMessageBoxEditOpinion(int idOpinion)
    {
        var opinionToEdit = ListMyOpinionsFarmhouse.FirstOrDefault(x => x.Id == idOpinion);
        opinionDto = new EditOpinionDto()
        {
            Comment = opinionToEdit.Comment,
            Rating = opinionToEdit.Rating
        };
        await mbox.Show();
    }    

    private async void EditOpinion(int idOpinion)
    {
        var opinion = ListMyOpinionsFarmhouse.FirstOrDefault(x => x.Id == idOpinion);
        if (opinion != null)
        {
            await OpinionService.EditOpinion(opinionDto, opinion.Id);
            opinion.Comment = opinionDto.Comment;
            opinion.Rating = opinionDto.Rating;
            StateHasChanged();
            AlertService.SetSuccessAlert($"Edit opinion about farmhouse {opinion.Farmhouse.Name}");
        }
    }

    private bool FilterFunc(Opinion opinion)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        // if (farmhouse.IdFarmhouse.Contains(searchString, StringComparison.OrdinalIgnoreCase))
        //     return true;
        // if (farmhouse.Address.Contains(searchString, StringComparison.OrdinalIgnoreCase))
        //     return true;
        // if (farmhouse.Description.Contains(searchString, StringComparison.OrdinalIgnoreCase))
        //     return true;
        if ($"{opinion.IdFarmhouse} {opinion.Id}".Contains(searchString))
            return true;
        return false;
    }
}
