@page "/myopinionsfarmhouses"
@inherits BasePage
@inject IOpinionService OpinionService
@inject IMapper Mapper
@inject IAlertService AlertService
@inject UserStateService UserStateService
@inject UtilsService UtilsService
@inject SearchService SearchService

<PageTitle>@loc["Dashboard_My_Opinions"] | @Globals.AppName</PageTitle>

@if (isLoading)
{
    <MudProgressCircular Class="m-4" Color="Color.Primary" />
}
else if (!string.IsNullOrEmpty(errorMessage))
{
    <MudAlert Severity="Severity.Error">@errorMessage</MudAlert>
}
else
{
    <MudTable Items="@ListMyOpinionsFarmhouse" Loading="@isLoading" SortLabel="Sort By" Hover="true" Filter="@(opinion => UtilsService.FilterFunc(opinion, SearchService.SearchString))" CommitEditTooltip="Commit Edit">
        <ToolBarContent>
            <MudText Typo="Typo.h6">@loc["Dashboard_My_Opinions"]</MudText>
            <MudSpacer />
            <MudTextField @bind-Value="SearchService.SearchString" Placeholder="@loc["X_Search"]" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0 input-search"></MudTextField>
        </ToolBarContent> 

        <HeaderContent>
            <MudTh><MudTableSortLabel InitialDirection="SortDirection.Ascending" SortBy="new Func<Opinion, object>(x=>x.Farmhouse.Name)">@loc["X_Farmhouse"]</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel InitialDirection="SortDirection.Ascending" SortBy="new Func<Opinion, object>(x=>x.Comment)">@loc["Opinion_Comment"]</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel InitialDirection="SortDirection.Ascending" SortBy="new Func<Opinion, object>(x=>x.Rating)">@loc["Opinion_Rating"]</MudTableSortLabel></MudTh>
            <MudTh>@loc["X_Action"]</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="Name">@context.Farmhouse.Name</MudTd>
            <MudTd DataLabel="Comment">@context.Comment</MudTd>
            <MudTd DataLabel="Rating">@context.Rating</MudTd>
            <MudTd DataLabel="Edit">
                <MudIconButton Icon="@Icons.Material.Filled.Edit" Variant="Variant.Filled" Color="Color.Primary" Size="Size.Medium" OnClick="() => OpenMessageBoxEditOpinion(context.Id)" />
                <MudIconButton Icon="@Icons.Material.Filled.Delete" Variant="Variant.Filled" Color="Color.Error" Size="Size.Medium" OnClick='() => UtilsService.OpenDialog(dialogData, () => DeleteOpinion(context.Id), Color.Error)' />
                <MudMessageBox @ref="mbox" Title="Edit opinion" CancelText="Cancel">
                    <MessageContent>
                        <div class="d-flex flex-column align-center">
                            <MudRating @bind-SelectedValue="opinionDto.Rating" />
                            <MudText Typo="Typo.subtitle2" Class="deep-purple-text mt-2">@loc["Opinion_Your_Opinion"]</MudText>
                        </div>
                        <MudTextField T="string" @bind-Value="opinionDto.Comment" Label="@loc["Opinion_Comment"]" Variant="Variant.Outlined" Lines="3" Placeholder="@loc["Opinion_Placeholder"]" />
                    </MessageContent>
                    <YesButton>
                        <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="() => EditOpinion(context.Id)">@loc["X_Edit"]</MudButton>
                    </YesButton>
                </MudMessageBox>
            </MudTd>
            </RowTemplate>
        <PagerContent>
            <MudTablePager RowsPerPageString="@loc["Table_Rows_Per_Page"]" PageSizeOptions="new int[]{50, 100}" />
        </PagerContent>
    </MudTable>
}

@code {
    List<Opinion> ListMyOpinionsFarmhouse = new List<Opinion>();

    private string searchString = null;
    MudMessageBox mbox { get; set; }
    EditOpinionDto opinionDto { get; set; }
    public DialogData dialogData = new DialogData();

    protected override async Task LoadDataAsync()
    {
        if (!await EnsureLoggedInAsync())
        {
            return;
        }

        ListMyOpinionsFarmhouse = await OpinionService.GetOpinionFarmhousesForUser(UserStateService.CurrentUser.IdUser);

        dialogData = new DialogData()
        {
            Title = $"{loc["X_Delete"]} {loc["X_Opinion"]}",
            ButtonName = loc["X_Delete"],
            Content = $"{loc["X_Are_You_Sure_Delete_This"]} {loc["X_Opinion"]}",
        };
    }

    private async void DeleteOpinion(int idOpinion)
    {
        var opinion = ListMyOpinionsFarmhouse.FirstOrDefault(x => x.Id == idOpinion);
        if (opinion != null)
        {
            await OpinionService.DeleteOpinion(opinion.Id);
            ListMyOpinionsFarmhouse.Remove(opinion);
            StateHasChanged();
            AlertService.SetDeleteAlert($"{@loc["Alert_Delete_Opinion"]} {opinion.Farmhouse.Name}");
            _ = AlertService.ClearAlertAfterDelay();
        }
    }

    private async void OpenMessageBoxEditOpinion(int idOpinion)
    {
        var opinionToEdit = ListMyOpinionsFarmhouse.FirstOrDefault(x => x.Id == idOpinion);
        opinionDto = new EditOpinionDto()
        {
            Comment = opinionToEdit.Comment,
            Rating = opinionToEdit.Rating
        };
        await mbox.Show();
    }    

    private async void EditOpinion(int idOpinion)
    {
        var opinion = ListMyOpinionsFarmhouse.FirstOrDefault(x => x.Id == idOpinion);
        if (opinion != null)
        {
            await OpinionService.EditOpinion(opinionDto, opinion.Id);
            opinion.Comment = opinionDto.Comment;
            opinion.Rating = opinionDto.Rating;
            StateHasChanged();
            AlertService.SetSuccessAlert($"{@loc["Alert_Successfully"]} {@loc["Alert_Edit_Opinion"]} {opinion.Farmhouse.Name}");
            _ = AlertService.ClearAlertAfterDelay();
        }
    }
}
