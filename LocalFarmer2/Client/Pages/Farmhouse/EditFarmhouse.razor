@page "/editFarmhouse"
@inject UserStateService UserStateService
@inject IMapper mapper
@inject IAccountService AccountService
@inject IFarmhouseService FarmhouseService
@inject IFavoriteFarmhouseService FavoriteFarmhouseService
@inject IJSRuntime JSRuntime
@inject IAlertService AlertService
@inject NavigationManager NavigationManager

@if (farmhouseDto == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <AuthorizeView>
        <EditForm Model="farmhouseDto" OnValidSubmit="OnValidSubmit" Context="editForm">
            <DataAnnotationsValidator />
            <MudGrid>
                <MudItem xs="12">
                    <MudText Class="d-flex justify-center" Typo="Typo.h6">Edit farmhouse</MudText>
                    @if (@currentUser?.IdFarmhouse != null)
                    {
                        <MudPaper Class="pa-4">
                            <MudTextField T="String" Label="Farmhouse name" @bind-Value="farmhouseDto.Name" Required="true" RequiredError="Farmhouse name is required!" />
                            <MudTextField T="String" Label="Description" @bind-Value="farmhouseDto.Description" />
                            <MudTextField T="String" Label="Address" @bind-Value="farmhouseDto.Address" />
                            <MudTextField T="String" Label="Phone" @bind-Value="farmhouseDto.Phone" />
                            <MudSelect T="string" Label="Payment methods" MultiSelection="true" SelectAll="true" Required="true" @bind-Value="@farmhouseDto.PaymentMethods" @bind-SelectedValues="SelectedPayment">
                                @foreach (var method in PaymentMethodInfo.PaymentMethods)
                                {
                                    <MudSelectItem T="string" Value="@method">@method</MudSelectItem>
                                }
                            </MudSelect>
                            <MudTextField T="String" Id="latitude_input" Disabled Label="Latitude" @bind-Value="farmhouseDto.Latitude" Required="true" Placeholder="Max 90" RequiredError="Latitude is required!" />
                             <MudTextField T="String" Id="longitude_input" Disabled Label="Longitude" @bind-Value="farmhouseDto.Longitude" Required="true" Placeholder="Max 180" RequiredError="Longitude is required!" />
                             <MudCheckBox T="Boolean" Checked="farmhouseDto.IsOpen" CheckedChanged="HandleCheckedChanged" Color="Color.Primary" Label="Active" />
                         </MudPaper>
                    }
                    <MudPaper Class="pa-4 mt-4">
                        <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary">Save</MudButton>
                        <MudButton OnClick="() => UnlockMap()" id="buttonChangeMarker" ButtonType="ButtonType.Button" Variant="Variant.Filled" Color="Color.Primary">Change marker</MudButton>
                        <MudButton OnClick="() => DeleteFarmhouse()" ButtonType="ButtonType.Button" Variant="Variant.Filled" Color="Color.Error">Delete</MudButton>
                    </MudPaper>
                </MudItem>
            </MudGrid>
        </EditForm>

        <div id="map" style="height: 400px;"></div>
        <div id="map2" style="height: 400px; display: none;"></div>
    </AuthorizeView>
}

@code {
    [Parameter]
    public FarmhouseDto farmhouseDto { get; set; }

    private IJSObjectReference? module;
    private string? result;
    private string? latitude;
    private string? longitude;
    private UserDto? currentUser;
    private bool isUserSignUp;
    private IEnumerable<string> SelectedPayment { get; set; } = PaymentMethodInfo.DefaultPayment;
    public int Id { get; set; }
    public bool initIsOpen;

    protected async override Task OnInitializedAsync()
    {
        isUserSignUp = await AccountService.IsUserSignUp();

        if (isUserSignUp)
        {
            currentUser = await AccountService.GetCurrentUser();
            UserStateService.CurrentUser = currentUser;
            if (UserStateService.CurrentUser?.IdFarmhouse != null)
            {
                var farmhouse = await FarmhouseService.GetFarmhouse((int)currentUser?.IdFarmhouse!);
                farmhouseDto = mapper.Map<FarmhouseDto>(farmhouse);
                SelectedPayment = farmhouseDto.PaymentMethods.Split(',').Select(s => s.Trim());
                initIsOpen = farmhouseDto.IsOpen;
            }
            else
            {
                throw new Exception("You must first set farmhouse, before edit");
            }
        }
    }

    protected async override Task OnParametersSetAsync()
    {
        // await base.OnParametersSetAsync();
        var client = new HttpClient();
        var raw = await client.GetStringAsync("https://localhost:7239/geojson.json");
        JArray jsonArray = JArray.Parse(raw);
        JObject newEntry = new JObject
            {
                ["type"] = "Feature",
                ["geometry"] = new JObject
                {
                    ["type"] = "Point",
                    ["coordinates"] = new JArray(farmhouseDto.Longitude, farmhouseDto.Latitude)
                },
                ["properties"] = new JObject
                {
                    ["name"] = farmhouseDto.Name
                }
            };

        jsonArray.Add(newEntry);
        raw = jsonArray.ToString();

        module = await JSRuntime.InvokeAsync<IJSObjectReference>("import", "./js/leafletmap.js");
        if (module != null)
        {
            result = await module.InvokeAsync<string>("load_map", Convert.ToString(raw), farmhouseDto.Latitude, farmhouseDto.Longitude);
        }
    }

    private async void OnValidSubmit(EditContext context)
    {
        if (module != null)
        {
            latitude = await module.InvokeAsync<string>("getValueById", "latitude_input");
            longitude = await module.InvokeAsync<string>("getValueById", "longitude_input");
        }

        farmhouseDto.Latitude = latitude;
        farmhouseDto.Longitude = longitude;
        FarmhouseDto dto = mapper.Map<FarmhouseDto>(farmhouseDto);
        await FarmhouseService.EditFarmhouse(dto, (int)currentUser?.IdFarmhouse!);
        UserStateService.CurrentUser.FarmhouseName = farmhouseDto.Name;

        //Alerts
        if (farmhouseDto.IsOpen != initIsOpen)
        {
            var listUsersIds = await FavoriteFarmhouseService.GetFavoriteFarmhouseUsersIds((int)currentUser.IdFarmhouse);
            var messageAlert = new MessageAlert(MessageAlertEnum.MessageIsOpen, farmhouseDto.Name, farmhouseDto.IsOpen);
            await AlertService.AddAlerts(listUsersIds, (int)currentUser.IdFarmhouse, messageAlert);
        }

        AlertService.SetSuccessAlert($"Successfully edited farmhouse {farmhouseDto.Name}");
        NavigationManager.NavigateTo("/");
    }

    private async void DeleteFarmhouse()
    {
        if (currentUser?.IdFarmhouse != null)
        {
            await FarmhouseService.DeleteFarmhouse((int)currentUser.IdFarmhouse);
            UserStateService.CurrentUser.FarmhouseName = null;
            UserStateService.CurrentUser.IdFarmhouse = null;
            AlertService.SetSuccessAlert($"Deleted farmhouse {farmhouseDto.Name}");
            NavigationManager.NavigateTo("/");
        }
    }

    private async void UnlockMap()
    {
        if (module != null)
        {
            result = await module.InvokeAsync<string>("setDisplayMap", "map", "none");
            result = await module.InvokeAsync<string>("removeMap", "map");
            result = await module.InvokeAsync<string>("disableButton", "buttonChangeMarker", "true");
            result = await module.InvokeAsync<string>("setDisplayMap", "map2", "block");
            result = await module.InvokeAsync<string>("setCoordinates", "map2", farmhouseDto.Latitude, farmhouseDto.Longitude);
        }
    }

    private void HandleCheckedChanged(bool isChecked)
    {
        farmhouseDto.IsOpen = isChecked;
    }
}