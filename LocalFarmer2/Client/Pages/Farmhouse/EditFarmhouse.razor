@page "/editFarmhouse"
@inject UserStateService UserStateService
@inject IMapper mapper
@inject IAccountService AccountService
@inject IFarmhouseService FarmhouseService
@inject AlertService alertService
@inject NavigationManager NavigationManager
@using System.Text.RegularExpressions
@using System.ComponentModel.DataAnnotations
<AuthorizeView>
    <EditForm Model="farmhouseDto" OnValidSubmit="OnValidSubmit" Context="editForm">
        <DataAnnotationsValidator />
        <MudGrid>
            <MudItem xs="12">
                <MudText Class="d-flex justify-center" Typo="Typo.h6">Settings</MudText>
                @if (@currentUser?.IdFarmhouse != null)
                {
                    <MudPaper Class="pa-4">
                        <MudTextField T="string" Label="Farmhouse name" @bind-Value="farmhouseDto.Name" Required="true" RequiredError="Farmhouse name is required!" />
                        <MudTextField T="string" Label="Description" @bind-Value="farmhouseDto.Description" />
                        <MudTextField T="string" Label="Address" @bind-Value="farmhouseDto.Address" />
                        <MudTextField T="string" Label="Phone" @bind-Value="farmhouseDto.Phone" />
                        <MudTextField Label="Latitude" @bind-Value="farmhouseDto.Latitude" Required="true" Placeholder="Max 90" RequiredError="Latitude is required!" />
                        <MudTextField Label="Longitude" @bind-Value="farmhouseDto.Longitude" Required="true" Placeholder="Max 180" RequiredError="Longitude is required!" />
                    </MudPaper>
                }
                <MudPaper Class="pa-4 mt-4">
                    <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary">Save</MudButton>
                    <MudButton OnClick="() => DeleteFarmhouse()" ButtonType="ButtonType.Button" Variant="Variant.Filled" Color="Color.Error">Delete</MudButton>
                </MudPaper>
            </MudItem>
        </MudGrid>
    </EditForm>
</AuthorizeView>
@code {
    private UserDto? currentUser;
    private bool isUserSignUp;
    public int Id { get; set; }
    private FarmhouseDto farmhouseDto = new FarmhouseDto();
    //TODO: Poprawić format dla latitide i longitude ( obecnie przymuje tylko 11,11, a powinno przyjmować też 11.11 oraz przy tym jak jest 0 poinformować, że jest 0 czy tak ma być )

    protected async override Task OnInitializedAsync()
    {
        isUserSignUp = await AccountService.IsUserSignUp();

        if (isUserSignUp)
        {
            currentUser = await AccountService.GetCurrentUser();
            UserStateService.CurrentUser = currentUser;
            if (UserStateService.CurrentUser?.IdFarmhouse != null)
            {
                var farmhouse = await FarmhouseService.GetFarmhouse((int)currentUser?.IdFarmhouse!);
                farmhouseDto = mapper.Map<FarmhouseDto>(farmhouse);
            }
            else
            {
                throw new Exception("You must first set farmhouse, before edit");
            }
        }
    }


    // protected override async Task OnParametersSetAsync()
    // {
    //     var product = await ProductService.GetProduct(Id);
    //     model = mapper.Map<ProductDto>(product);
    // }


    private async void OnValidSubmit(EditContext context)
    {
        FarmhouseDto dto = mapper.Map<FarmhouseDto>(farmhouseDto);
        await FarmhouseService.EditFarmhouse(dto, (int)currentUser?.IdFarmhouse!);
        alertService.SetSuccessAlert($"Successfully edited farmhouse {farmhouseDto.Name}");
        NavigationManager.NavigateTo("/");
    }

    private async void DeleteFarmhouse()
    {
        if (currentUser?.IdFarmhouse != null)
        {
            await FarmhouseService.DeleteFarmhouse((int)currentUser.IdFarmhouse);
            alertService.SetSuccessAlert($"Deleted farmhouse {farmhouseDto.Name}");
            NavigationManager.NavigateTo("/");
        }
    }

}