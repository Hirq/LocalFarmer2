@page "/editFarmhouse"
@inherits BasePage
@using System.Text.Json
@inject IMapper mapper
@inject IAccountService AccountService
@inject IFarmhouseService FarmhouseService
@inject IFavoriteFarmhouseService FavoriteFarmhouseService
@inject IJSRuntime JSRuntime
@inject IAlertService AlertService
@inject UserStateService UserStateService
@inject NavigationManager NavigationManager
@inject ValidateService ValidateService
@inject FileService FileService
@inject UtilsService UtilsService

<PageTitle>@loc["Farmhouse_Edit_Farmhouse"] | @Globals.AppName</PageTitle>


@if (isLoading)
{
    <MudProgressCircular Class="m-4" Color="Color.Primary" />
}
else if (!string.IsNullOrEmpty(errorMessage))
{
    <MudAlert Severity="Severity.Error">@errorMessage</MudAlert>
}
else
{
    <AuthorizeView>
        <MudPaper Class="mudPaperTop">
        <div class="mud-table-toolbar titlePage">
            <MudText Class="d-flex justify-center" Typo="Typo.h6">@loc["Farmhouse_Edit_Farmhouse"]</MudText>
        </div>
        </MudPaper>
            <EditForm Model="farmhouseDto" OnValidSubmit="OnValidSubmit" Context="editForm" >
            <DataAnnotationsValidator />
            <MudGrid>
                <MudItem xs="12">
                    @if (@currentUser?.IdFarmhouse != null)
                    {
                        <MudPaper Class="pa-4 d-flex justify-space-between mudPaperBottom">
                            <div>
                                <MudTextField T="String" Label="@loc["X_Name"]" @bind-Value="farmhouseDto.Name" @ref="farmhouseNameField" Required For="@(() => farmhouseDto.Name)" ErrorText="@loc["Validation_Required"]" />
                                <MudTextField T="String" Label="@loc["X_Description"]" @bind-Value="farmhouseDto.Description" />
                                <MudTextField T="String" Label="@loc["Farmhouse_Address"]" @bind-Value="farmhouseDto.Address" />
                                <MudTextField T="String" Label="@loc["Farmhouse_Phone"]" @bind-Value="farmhouseDto.Phone" />
                                <MudTextField T="String" Label="Email" @bind-Value="farmhouseDto.Email" For="@(() => farmhouseDto.Email)" ErrorText="@loc["ErrorEmailValid"]" />
                                <MudSelect T="string" Label="@loc["Farmhouse_Payment_Methods"]" MultiSelection="true" SelectAll="true" @ref="paymentMethodsField" Required RequiredError="@loc["Validation_Required"]" @bind-Value="@farmhouseDto.PaymentMethods" @bind-SelectedValues="SelectedPayment">
                                    @foreach (var method in PaymentMethodInfo.PaymentMethods)
                                    {
                                        <MudSelectItem T="string" Value="@method">@method</MudSelectItem>
                                    }
                                </MudSelect>
                                <MudTextField T="String" Id="latitude_input" Disabled Label="@loc["Farmhouse_Latitude"]" @bind-Value="farmhouseDto.Latitude" @ref="latitudeField" Required Placeholder="Max 90" RequiredError="@loc["Validation_Required"]" />
                                <MudTextField T="String" Id="longitude_input" Disabled Label="@loc["Farmhouse_Longitude"]" @bind-Value="farmhouseDto.Longitude" @ref="longitudeField" Required Placeholder="Max 180" RequiredError="@loc["Validation_Required"]" />
                                <MudCheckBox T="Boolean" Checked="farmhouseDto.IsOpen" CheckedChanged="HandleCheckedChanged" Color="Color.Primary" Label="@loc["X_Active"]" />
                                <EditFile Name="@loc["Farmhouse_Photo"]" Model="@farmhouseDto"/>
                            </div>
                            <div>
                                 <MudButton OnClick="() => ShowFarmhouse((int)UserStateService.CurrentUser.IdFarmhouse)" ButtonType="ButtonType.Button" Variant="Variant.Filled" Color="Color.Primary">Go to details</MudButton>
                            </div>
                         </MudPaper>
                    }
                    <MudPaper Class="pa-4 mt-4 d-flex justify-space-between">
                        <div>
                            <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary">@loc["X_Save"]</MudButton>
                            <MudButton OnClick="() => UnlockMap()" id="buttonChangeMarker" ButtonType="ButtonType.Button" Variant="Variant.Filled" Color="Color.Primary">@loc["Map_Change_Marker"]</MudButton>
                        </div>
                        <div>
                            <MudButton OnClick='() => UtilsService.OpenDialog(dialogData, () => DeleteFarmhouse(), Color.Error)' Variant="Variant.Filled" Color="Color.Error">@loc["X_Delete"]</MudButton>
                        </div>
                    </MudPaper>
                </MudItem>
            </MudGrid>
        </EditForm>

        <div id="map" style="height: 400px;"></div>
        <div id="map2" style="height: 400px; display: none;"></div>
    </AuthorizeView>
}

@code {
    [Parameter]
    public FarmhouseDto farmhouseDto { get; set; }

    private bool isLoading = false;
    private string? errorMessage;
    private FarmhouseDto originalFarmhouseDto { get; set; }
    private IJSObjectReference? module;
    private string? result;
    private string? latitude;
    private string? longitude;
    private UserDto? currentUser;
    private bool isUserSignUp;
    private IEnumerable<string> SelectedPayment { get; set; } = PaymentMethodInfo.DefaultPayment;
    private MudTextField<string> farmhouseNameField;
    private MudTextField<string> latitudeField;
    private MudTextField<string> longitudeField;
    private MudSelect<string> paymentMethodsField;
    public int Id { get; set; }
    public DialogData dialogData = new DialogData();
    public bool initIsOpen;

    protected override async Task LoadDataAsync()
    {
        dialogData = new DialogData()
        {
            Title = $"{loc["X_Delete"]} {loc["X_Farmhouse"]}",
            ButtonName = loc["X_Delete"],
            Content = $"{loc["X_Are_You_Sure_Delete_This"]} {loc["X_Farmhouse"]}",
        };
        isUserSignUp = await AccountService.IsUserLogged();

        if (!isUserSignUp)
        {
            errorMessage = $"{loc["ErrorUserIsNotLogged"]}";
            return;
        }

        currentUser = await AccountService.GetCurrentUser();
        UserStateService.CurrentUser = currentUser;

        if (UserStateService.CurrentUser?.IdFarmhouse == null)
        {
            errorMessage = $"{loc["ErrorUserDoesnotHaveFarmhouse"]}";
            return;
        }

        var farmhouse = await FarmhouseService.GetFarmhouse((int)currentUser?.IdFarmhouse!);
        farmhouseDto = mapper.Map<FarmhouseDto>(farmhouse);
        originalFarmhouseDto = mapper.Map<FarmhouseDto>(farmhouse);
        SelectedPayment = farmhouseDto.PaymentMethods.Split(',').Select(s => s.Trim());
        initIsOpen = farmhouseDto.IsOpen;
        if (farmhouseDto.ImageData != null && !string.IsNullOrEmpty(farmhouseDto.ImageMimeType))
        {
            FileService.SetName($"{loc["Farmhouse_ImageIsSet"]}");
        }
    }

    protected async override Task OnParametersSetAsync()
    {
        var client = new HttpClient();
        var raw = await client.GetStringAsync("https://localhost:7239/geojson.json");
        JArray jsonArray = JArray.Parse(raw);
        JObject newEntry = new JObject
            {
                ["type"] = "Feature",
                ["geometry"] = new JObject
                {
                    ["type"] = "Point",
                    ["coordinates"] = new JArray(farmhouseDto.Longitude, farmhouseDto.Latitude)
                },
                ["properties"] = new JObject
                {
                    ["name"] = farmhouseDto.Name
                }
            };

        jsonArray.Add(newEntry);
        raw = jsonArray.ToString();

        module = await JSRuntime.InvokeAsync<IJSObjectReference>("import", "./js/leafletmap.js");
        if (module != null)
        {
            result = await module.InvokeAsync<string>("load_map", Convert.ToString(raw), farmhouseDto.Latitude, farmhouseDto.Longitude);
        }
    }

    private async void OnValidSubmit(EditContext context)
    {
        if (module != null)
        {
            latitude = await module.InvokeAsync<string>("getValueById", "latitude_input");
            longitude = await module.InvokeAsync<string>("getValueById", "longitude_input");
        }

        farmhouseDto.Latitude = latitude;
        farmhouseDto.Longitude = longitude;

        var fieldsToValidate = new List<FieldToValidate>
        {
            new FieldToValidate(latitudeField, farmhouseDto.Latitude),
            new FieldToValidate(longitudeField, farmhouseDto.Longitude),
            new FieldToValidate(paymentMethodsField, farmhouseDto.PaymentMethods)
        };

        context.Validate();

        if (ValidateService.ValidateMudTextFields(fieldsToValidate))
        {
            return;
        }

        if (!ValidateService.IsValidLatitude(farmhouseDto.Latitude) || !ValidateService.IsValidLongitude(farmhouseDto.Longitude))
        {
            return;
        }

        if (string.IsNullOrEmpty(UserStateService.CurrentUser?.IdUser))
        {
            throw new Exception("EditFarmhouse: Not found user");
        }

        var currentJson = JsonSerializer.Serialize(farmhouseDto);
        var originalJson = JsonSerializer.Serialize(originalFarmhouseDto);

        if (currentJson == originalJson)
        {
            NavigationManager.NavigateTo("/");
            return;
        }

        await FarmhouseService.EditFarmhouse(farmhouseDto, (int)currentUser?.IdFarmhouse!);
        UserStateService.CurrentUser.FarmhouseName = farmhouseDto.Name;

        //Alerts
        var listUsersIds = await FavoriteFarmhouseService.GetFavoriteFarmhouseUsersIds((int)currentUser.IdFarmhouse);
        if (farmhouseDto.IsOpen != initIsOpen)
        {
            var messageAlertIsOpen = new MessageAlert(MessageAlertEnum.FarmhouseIsOpen, farmhouseDto.Name, null, farmhouseDto.IsOpen);
            await AlertService.AddAlerts(listUsersIds, (int)currentUser.IdFarmhouse, true, messageAlertIsOpen);
        }

        var messageAlertEdit = new MessageAlert(MessageAlertEnum.EditDetails, UserStateService.CurrentUser.FarmhouseName);
        await AlertService.AddAlerts(listUsersIds, (int)currentUser.IdFarmhouse, true, messageAlertEdit);

        AlertService.SetSuccessAlert($"{@loc["Alert_Successfully"]} {@loc["Alert_Edit_Farmhouse"]} {farmhouseDto.Name}");
        NavigationManager.NavigateTo("/");
        _ = AlertService.ClearAlertAfterDelay();
    }

    private async void DeleteFarmhouse()
    {
        if (currentUser?.IdFarmhouse != null)
        {
            await FarmhouseService.DeleteFarmhouse((int)currentUser.IdFarmhouse);
            UserStateService.CurrentUser.FarmhouseName = null;
            UserStateService.CurrentUser.IdFarmhouse = null;
            AlertService.SetDeleteAlert($"{@loc["Alert_Delete_Farmhouse"]} {farmhouseDto.Name}");
            NavigationManager.NavigateTo("/");
            _ = AlertService.ClearAlertAfterDelay();
        }
    }

    private async void UnlockMap()
    {
        if (module != null)
        {
            result = await module.InvokeAsync<string>("setDisplayMap", "map", "none");
            result = await module.InvokeAsync<string>("removeMap", "map");
            result = await module.InvokeAsync<string>("disableButton", "buttonChangeMarker", "true");
            result = await module.InvokeAsync<string>("setDisplayMap", "map2", "block");
            result = await module.InvokeAsync<string>("setCoordinates", "map2", farmhouseDto.Latitude, farmhouseDto.Longitude);
        }
    }

    private void HandleCheckedChanged(bool isChecked)
    {
        farmhouseDto.IsOpen = isChecked;
    }

    private string GetImageSrc()
    {
        if (farmhouseDto.ImageData == null)
        {
            return string.Empty;
        }

        var base64 = Convert.ToBase64String(farmhouseDto.ImageData);
        return $"data:{farmhouseDto.ImageMimeType};base64,{base64}";
    }

    private async Task OpenImageInNewTab()
    {
        var imageSrc = GetImageSrc();
        await JSRuntime.InvokeVoidAsync("open", imageSrc, "_blank");
    }

    private void ShowFarmhouse(int id)
    {
        NavigationManager.NavigateTo($"farmhouse/{id}");
    }
}