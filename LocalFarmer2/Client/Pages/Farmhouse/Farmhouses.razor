@page "/farmhouses"
@inject IFarmhouseService FarmhouseService
@inject IProductService ProductService
@inject IFavoriteFarmhouseService FavoriteFarmhouseService
@inject IOpinionService OpinionService
@inject NavigationManager NavigationManager
@inject HttpClient httpClient
@inject AlertService alertService
@inject UserStateService UserStateService

<PageTitle>Farmhouses</PageTitle>

<MudTable Items="@ListFarmhousesVM" SortLabel="Sort By" Hover="true" Filter="new Func<FarmhouseViewModel,bool>(FilterFunc)" CommitEditTooltip="Commit Edit">
    <ToolBarContent>
        <MudText Typo="Typo.h6">Farmhouses</MudText>
        <MudSpacer />
        <MudTextField @bind-Value="searchString" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
    </ToolBarContent>

    <HeaderContent>
        <MudTh></MudTh>
        <MudTh><MudTableSortLabel InitialDirection="SortDirection.Ascending" SortBy="new Func<FarmhouseViewModel, object>(x=>x.Id)">Nr</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortBy="new Func<FarmhouseViewModel, object>(x=>x.Name)">Sign</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortBy="new Func<FarmhouseViewModel, object>(x=>x.Description)">Description</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortBy="new Func<FarmhouseViewModel, object>(x=>x.Address)">Address</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortBy="new Func<FarmhouseViewModel, object>(x=>x.Phone)">Phone</MudTableSortLabel></MudTh>
        <MudTh>Detail</MudTh>
        <MudTh>Products</MudTh>
        <AuthorizeView>
            <Authorized>
                <MudTh>Subscribe</MudTh>
                <MudTh>Add opinion</MudTh>
            </Authorized>
        </AuthorizeView>
    </HeaderContent>
    <RowTemplate Context="row">
        <MudTd><MudButton Variant="Variant.Outlined" Size="Size.Small" OnClick="@(() => ShowBtnPress(row.Id))">@((row.ShowDetails == true) ? "Hide" : "Show") Products</MudButton></MudTd>
        <MudTd DataLabel="Nr">@row.Id</MudTd>
            <MudTd DataLabel="Sign">@row.Name</MudTd>
            <MudTd DataLabel="Name">@row.Description</MudTd>
            <MudTd DataLabel="Position">@row.Address</MudTd>
            <MudTd DataLabel="Molar mass">@row.Phone</MudTd>
            <MudTd DataLabel="Molar mass"><MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="() => ShowFarmhouse(row.Id)">Go to detail</MudButton></MudTd>
            <MudTd DataLabel="Molar mass"><MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="() => ShowProducts(row.Id)">Show products</MudButton></MudTd>
            <AuthorizeView>
                <Authorized>
                    @if (row.IsFavorite == false)
                        {
                            <MudTd DataLabel="Molar mass"><MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="() => AddFavorite(row.Id)">Add favorite</MudButton></MudTd>
                        }
                    @if (row.IsCommented == false)
                        {
                            <MudTd DataLabel="Molar mass"><MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="() => AddOpinion(row.Id)">Add opinion</MudButton></MudTd>
                        }
                </Authorized>
            </AuthorizeView>
        </RowTemplate>

        <ChildRowContent>
            @if (context.ShowDetails)
        {
            <MudTr>
                <td colspan="4">
                    <MudCard Outlined="true" Elevation="0" Class="list-products">
                        <MudCardHeader>
                            <CardHeaderContent>
                                <MudText Typo="Typo.body1" Class="text-white">Products for <strong>@context.Name</strong></MudText>
                            </CardHeaderContent>
                        </MudCardHeader>
                        <MudCardContent Class="pa-0">
                            <MudTable Items="@context.Products" Context="ProductContext" Hover="true" Breakpoint="Breakpoint.Sm" Elevation="0">
                                <ColGroup>
                                    <col />
                                    <col />
                                    <col style="width:200px;" />
                                </ColGroup>
                                <HeaderContent>
                                    <MudTh>Name</MudTh>
                                    <MudTh>Prize one</MudTh>
                                    <MudTh>Description</MudTh>
                                </HeaderContent>
                                <RowTemplate>
                                    <MudTd DataLabel="Address Line 1">@ProductContext.Name</MudTd>
                                        <MudTd DataLabel="Address Line 2">@ProductContext.PrizeOne</MudTd>
                                        <MudTd DataLabel="Postal Code">@ProductContext.Description</MudTd>
                                    </RowTemplate>
                                </MudTable>
                            </MudCardContent>
                        </MudCard>
                    </td>
                </MudTr>
        }
    </ChildRowContent>

    <PagerContent>
        <MudTablePager PageSizeOptions="new int[]{50, 100}" />
    </PagerContent>
</MudTable>

@code {
    List<FarmhouseViewModel> ListFarmhousesVM = new List<FarmhouseViewModel>();
    private int[] CurrentListFavorite;
    private Product product = new Product();
    private string searchString = null;
    public bool ShowDetails { get; set; }
    private string idUser = null;

    protected override async Task OnInitializedAsync()
    {
        int? idFarmhouse = UserStateService.CurrentUser?.IdFarmhouse;
        idUser = UserStateService.CurrentUser?.IdUser;
        Console.WriteLine(idUser);
        if (!string.IsNullOrEmpty(idUser))
        {
            CurrentListFavorite = await FavoriteFarmhouseService.GetFavoriteFarmhousesForUserOnlyIds(idUser);
        }        

        ListFarmhousesVM = await FarmhouseService.GetFarmhousesWithProductsAndButton(CurrentListFavorite, idFarmhouse);

        // 3 types of users
        // 1. Not logged                            idUser null + idFarmhouse null
        // 2. have account without farmhouse        idUser not null + idFarmhouse null
        // 3. have account with farmhouse           idUser not null + idFarmhouse not null

        AddComment();
    }

    void AddComment()
    {
        ListFarmhousesVM.ToList().ForEach(x => Console.WriteLine(x.Name + " | " + x.IsFavorite));

        if (CurrentListFavorite?.Length > 0)
        {
            Console.WriteLine("Favorites: ");

            foreach (var n in CurrentListFavorite)
            {
                Console.WriteLine("Id: "+n);
            }
        }
    }

    void ShowFarmhouse(int id)
    {
        NavigationManager.NavigateTo($"farmhouse/{id}");
    }

    void ShowProducts(int id)
    {
        NavigationManager.NavigateTo($"productsFarmhouse/{id}");
    }

    private async void AddFavorite(int idFarmhouse)
    {
        await FavoriteFarmhouseService.AddFavorite(idFarmhouse);
        var addedFarmhouse = ListFarmhousesVM.FirstOrDefault(x => x.Id == idFarmhouse);
        if (addedFarmhouse != null)
        {
            addedFarmhouse.IsFavorite = true;
            StateHasChanged();
            alertService.SetSuccessAlert($"Successfully added subscribe {idFarmhouse}");
        }
    }

    private async void AddOpinion(int idFarmhouse)
    {
        Console.WriteLine(UserStateService.CurrentUser?.IdUser);
        AddOpinionDto dto = new AddOpinionDto()
        {
            IdFarmhouse = idFarmhouse,
            IdUser = idUser,
            Comment = "Comment",
            Rating = 4
        };

        await OpinionService.AddOpinion(dto, idFarmhouse);

        var addedFarmhouse = ListFarmhousesVM.FirstOrDefault(x => x.Id == idFarmhouse);
        if (addedFarmhouse != null)
        {
            addedFarmhouse.IsCommented = true;
            StateHasChanged();
            alertService.SetSuccessAlert($"Successfully added opinion about {idFarmhouse}");
        }
    }

    private bool FilterFunc(FarmhouseViewModel farmhouse)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (farmhouse.Name.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (farmhouse.Address.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (farmhouse.Description.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if ($"{farmhouse.Phone} {farmhouse.Id}".Contains(searchString))
            return true;
        return false;
    }

    private void ShowBtnPress(int id)
    {
        FarmhouseViewModel tmpProduct = ListFarmhousesVM.First(f => f.Id == id);
        tmpProduct.ShowDetails = !tmpProduct.ShowDetails;
    }
}
