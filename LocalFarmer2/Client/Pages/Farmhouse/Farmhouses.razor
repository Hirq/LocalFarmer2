@page "/farmhouses"
@inherits BasePage
@inject IFarmhouseService FarmhouseService
@inject IProductService ProductService
@inject IFavoriteFarmhouseService FavoriteFarmhouseService
@inject IOpinionService OpinionService
@inject IAccountService AccountService
@inject IAlertService AlertService
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager
@inject HttpClient httpClient
@inject UserStateService UserStateService
@inject SearchService SearchService
@inject UtilsService UtilsService

<PageTitle>@loc["X_Farmhouses"] | @Globals.AppName</PageTitle>

@if (isLoading)
{
    <MudProgressCircular Class="m-4" Color="Color.Primary" />
}
else if (!string.IsNullOrEmpty(errorMessage))
{
    <MudAlert Severity="Severity.Error">@errorMessage</MudAlert>
}
else
    {
    <MudTable Items="@ListFarmhousesVM" Loading="@isLoading" SortLabel="Sort By" Hover="true" Filter="@(farmhouse => UtilsService.FilterFunc(farmhouse, SearchService.SearchString))" CommitEditTooltip="Commit Edit">
        <ToolBarContent>
            <MudText Typo="Typo.h6">@loc["X_Farmhouses"]</MudText>
            <MudSpacer />
            <div class="mr-3">
                <MudButton Color="Color.Warning" Variant="Variant.Filled" Class="noteButtonFilter" OnClick="@(() => FilterFavorite())">@FilterName</MudButton>
                <div class="position-indicators">
                    <div class="indicator2 @(FilterNotes == 0 ? "active" : "")" onclick="@(() => SetFilter(0))"></div>
                    <div class="indicator2 @(FilterNotes == 1 ? "active" : "")" onclick="@(() => SetFilter(1))"></div>
                </div>
            </div>
            <MudTextField @bind-Value="SearchService.SearchString" Placeholder="@loc["X_Search"]" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0 input-search"></MudTextField>
        </ToolBarContent>

        <HeaderContent>
            <MudTh></MudTh>
            <MudTh><MudTableSortLabel InitialDirection="SortDirection.Ascending" SortBy="new Func<FarmhouseViewModel, object>(x => x.Name)">@loc["X_Name"]</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<FarmhouseViewModel, object>(x=>x.Description)">@loc["X_Description"]</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<FarmhouseViewModel, object>(x=>x.Address)">@loc["Farmhouse_Address"]</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<FarmhouseViewModel, object>(x=>x.Phone)">@loc["Farmhouse_Phone"]</MudTableSortLabel></MudTh>
            <MudTh>@loc["X_Details"]</MudTh>
            <MudTh>@loc["X_Products"]</MudTh>
            <AuthorizeView>
                <Authorized>
                    <MudTh>@loc["Farmhouse_Subscribe"]</MudTh>
                    <MudTh>@loc["Opinion_Add_Opinion"]</MudTh>
                </Authorized>
            </AuthorizeView>
        </HeaderContent>
        <RowTemplate Context="row">
                <MudTd><MudButton Variant="Variant.Outlined" Size="Size.Small" OnClick="@(() => ShowBtnPress(row.Id))">@((row.ShowDetails == true) ? loc["Button_Hide_Products"] : loc["Button_Show_Products"])</MudButton></MudTd>
                <MudTd DataLabel="Name">@row.Name</MudTd>
                <MudTd DataLabel="Description">@row.Description</MudTd>
                <MudTd DataLabel="Address">@row.Address</MudTd>
                <MudTd DataLabel="Phone">@row.Phone</MudTd>
                <MudTd DataLabel="Detail"><MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="() => ShowFarmhouse(row.Id)">@loc["Button_Go_To_Details"]</MudButton></MudTd>
                <MudTd DataLabel="Products"><MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="() => ShowProducts(row.Id)">@loc["Button_Show_Products"]</MudButton></MudTd>
                <AuthorizeView>
                    <Authorized>
                    @if (row.IsFavorite == false)
                    {
                        <MudTd DataLabel="Favorite"><MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="() => AddFavorite(row.Id)">@loc["X_Add"] @loc["X_Subscription"]</MudButton></MudTd>
                    }
                    else
                    {
                        <MudTd DataLabel="Favorite"></MudTd>
                    }
                    @if (row.IsCommented == false)
                    {
                        <MudTd DataLabel="Opinion">
                            <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="() => OnButtonClicked(row.Id)">Add opinion</MudButton>
                            <MudMessageBox @ref="mbox" Title="Add opinion" CancelText="Cancel">
                                <MessageContent>
                                    <div class="d-flex flex-column align-center">
                                        <MudRating @bind-SelectedValue="opinion.Rating"/>
                                        <MudText Typo="Typo.subtitle2" Class="deep-purple-text mt-2">Rate our farmhouse!</MudText>
                                    </div>
                                    <MudTextField T="string" @bind-Value="opinion.Comment" Label="Comment" Variant="Variant.Outlined" Lines="3" Placeholder="Set star and add your opinion"/>
                                </MessageContent>
                                <YesButton>
                                    <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="() => AddOpinion()">Add</MudButton>
                                </YesButton>
                            </MudMessageBox>
                        </MudTd>
                    }
                    else
                    {
                        <MudTd DataLabel="Opinion"></MudTd>
                    }
                </Authorized>
            </AuthorizeView>
        </RowTemplate>
        
        <ChildRowContent>
            @if (context.ShowDetails)
            {
                <MudTr>
                    <td colspan="12">
                        <MudCard Outlined="true" Elevation="0" Class="list-products borderTableFarmhouses">
                            <MudCardContent Class="pa-0">
                                <MudTable Items="@context.Products" Context="ProductContext" Hover="true" Breakpoint="Breakpoint.Sm" Elevation="0">
                                    <HeaderContent>
                                        <MudTh>@loc["X_Name"]</MudTh>
                                        <MudTh>@loc["X_Description"]</MudTh>
                                        <MudTh>@loc["Product_Minimal_Amount"]</MudTh>
                                        <MudTh>@loc["Product_Prize_One"]</MudTh>
                                        <MudTh>@loc["Product_Total_Quantity"]</MudTh>
                                    </HeaderContent>
                                    <RowTemplate>
                                        <MudTd DataLabel="Name">@ProductContext.Name</MudTd>
                                        <MudTd DataLabel="Description">@ProductContext.Description</MudTd>
                                        <MudTd DataLabel="Count min one">@ProductContext.CountMinOne</MudTd>
                                        <MudTd DataLabel="Prize one">@ProductContext.PrizeOne</MudTd>
                                        <MudTd DataLabel="Count all">@ProductContext.CountAll</MudTd>
                                    </RowTemplate>
                                </MudTable>
                            </MudCardContent>
                        </MudCard>
                    </td>
                </MudTr>
            }
        </ChildRowContent>

        <PagerContent>
            <MudTablePager RowsPerPageString="@loc["Table_Rows_Per_Page"]" PageSizeOptions="new int[]{50, 100}" />
        </PagerContent>
    </MudTable>
}

@code {
    [Parameter]
    public List<FarmhouseViewModel> ListFarmhousesVM { get; set; }

    public List<FarmhouseViewModel> originalFarmhousesList { get; set; }
    private bool isFavoriteFilterActive = false;
    private int[] CurrentListFavorite;
    private int[] CurrentListOpinion;
    private Product product = new Product();
    private Opinion opinion = new Opinion()
    {
            Rating = 3,
    };
    private string searchString = null;
    public bool ShowDetails { get; set; }
    public bool isUserSignUp = false;
    private string idUser = null;
    MudMessageBox mbox { get; set; }
    private int FilterNotes = 0;
    private string FilterName = string.Empty;
    /*
    0 - All
    1 - Only Favorite
    */

    protected override async Task LoadDataAsync()
    {
        int? idFarmhouse = UserStateService.CurrentUser?.IdFarmhouse;
        idUser = UserStateService.CurrentUser?.IdUser;

        if (!string.IsNullOrEmpty(idUser))
        {
            CurrentListFavorite = await FavoriteFarmhouseService.GetFavoriteFarmhousesForUserOnlyIds(idUser);
            CurrentListOpinion = await OpinionService.GetOpinionFarmhousesForUserOnlyIds(idUser);
        }

        ListFarmhousesVM = await FarmhouseService.GetFarmhousesWithProductsAndButton(CurrentListFavorite, CurrentListOpinion, idFarmhouse);
        originalFarmhousesList = ListFarmhousesVM;
        FilterName = loc["Filter_All"];

        // 3 types of users
        // 1. Not logged                            idUser null + idFarmhouse null
        // 2. have account without farmhouse        idUser not null + idFarmhouse null
        // 3. have account with farmhouse           idUser not null + idFarmhouse not null
    }

    void ShowFarmhouse(int id)
    {
        NavigationManager.NavigateTo($"farmhouse/{id}");
    }

    void ShowProducts(int id)
    {
        NavigationManager.NavigateTo($"productsFarmhouse/{id}");
    }

    private async void AddFavorite(int idFarmhouse)
    {
        await FavoriteFarmhouseService.AddFavorite(idFarmhouse);
        var addedFarmhouse = ListFarmhousesVM.FirstOrDefault(x => x.Id == idFarmhouse);
        if (addedFarmhouse != null)
        {
            addedFarmhouse.IsFavorite = true;

            //Alerts
            var UserIdAlert = await AccountService.GetUserByFarmhouseId(idFarmhouse);

            AlertUserIds listUsersIds = new AlertUserIds
            {
                IdUserTarget = { UserIdAlert.IdUser },
                IdUserSource = { UserStateService.CurrentUser.IdUser }
            };

            // var listUsersIds = new List<string>() { UserIdAlert.IdUser };
            var messageAlert = new MessageAlert(MessageAlertEnum.NewSubscriber, UserStateService.CurrentUser.FullName);
            await AlertService.AddAlerts(listUsersIds, null, false, messageAlert);

            StateHasChanged();
            AlertService.SetSuccessAlert($"{@loc["Alert_Successfully"]} {@loc["Alert_Add_Subscribe"]} {idFarmhouse}");
            _ = AlertService.ClearAlertAfterDelay();
        }
    }

    private async void OnButtonClicked(int idFarmhouse)
    {
        opinion.Comment = string.Empty;
        opinion.Rating = 3;
        opinion.IdFarmhouse = idFarmhouse;
        bool? result = await mbox.Show();
        StateHasChanged();
    }

    private async void AddOpinion()
    {
        AddOpinionDto dto = new AddOpinionDto()
            {
                IdFarmhouse = opinion.IdFarmhouse,
                IdUser = idUser,
                Comment = opinion.Comment,
                Rating = opinion.Rating
            };

        await OpinionService.AddOpinion(dto);

        var addedFarmhouse = ListFarmhousesVM.FirstOrDefault(x => x.Id == opinion.IdFarmhouse);
        if (addedFarmhouse != null)
        {
            addedFarmhouse.IsCommented = true;

            //Alerts
            var UserIdAlert = await AccountService.GetUserByFarmhouseId(opinion.IdFarmhouse);
            AlertUserIds listUsersIds = new AlertUserIds
            {
                IdUserTarget = { UserIdAlert.IdUser },
                IdUserSource = { UserStateService.CurrentUser.IdUser }
            };
            var messageAlert = new MessageAlert(MessageAlertEnum.NewOpinion, dto.Comment);
            await AlertService.AddAlerts(listUsersIds, null, false, messageAlert);

            StateHasChanged();
            var farmhouse = await FarmhouseService.GetFarmhouse(opinion.IdFarmhouse);
            AlertService.SetSuccessAlert($"{@loc["Alert_Successfully"]} {@loc["Alert_Add_Opinion"]} {farmhouse.Name}");
            _ = AlertService.ClearAlertAfterDelay();
        }
        opinion.Comment = string.Empty;
        opinion.Rating = 3;
        opinion.IdFarmhouse = 0;
    }

    private void FilterFavorite()
    {
        FilterNotes = (FilterNotes + 1) % 2;
        isFavoriteFilterActive = !isFavoriteFilterActive;

        if (isFavoriteFilterActive)
        {
            ListFarmhousesVM = originalFarmhousesList.Where(x => x.IsFavorite).ToList();
            FilterName = loc["Button_Only_Favorite"];
        }
        else 
        {
            ListFarmhousesVM = originalFarmhousesList;
            FilterName = loc["Filter_All"];
        }
    }

    private void SetFilter(int filtr)
    {
        FilterNotes = filtr;
        FilterFavorite();
    }

    private void ShowBtnPress(int id)
    {
        FarmhouseViewModel tmpProduct = ListFarmhousesVM.First(f => f.Id == id);
        tmpProduct.ShowDetails = !tmpProduct.ShowDetails;
    }
}
