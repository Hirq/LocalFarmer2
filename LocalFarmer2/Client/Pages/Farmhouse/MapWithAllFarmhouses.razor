@page "/mapfarmhouses"
@using Newtonsoft.Json.Linq
@using System.Globalization
@inject IFarmhouseService FarmhouseService
@inject IJSRuntime JSRuntime
@implements IAsyncDisposable
<PageTitle>Map with all farmhouses</PageTitle>

<h2>1 Map - A lot farmhouses</h2>
<h2>MAPA</h2>
<div id="map" style="height:70vh; width: 100%"></div>
@code {
    [Parameter]
    public List<Farmhouse> farmhouses { get; set; }
    public int Id { get; set; }
    private IJSObjectReference? module;
    private string? result;

    protected override async Task OnInitializedAsync()
    {
        farmhouses = (await FarmhouseService.GetFarmhouses()).Where(x => x.IsOpen && IsValidLatitude(x.Latitude) && IsValidLongitude(x.Longitude)).ToList();
    }


    bool IsValidLatitude(string latStr)
    {
        if (double.TryParse(latStr, NumberStyles.Float, CultureInfo.InvariantCulture, out double lat))
        {
            return lat >= -90 && lat <= 90;
        }
        return false;
    }

    bool IsValidLongitude(string lonStr)
    {
        if (double.TryParse(lonStr, NumberStyles.Float, CultureInfo.InvariantCulture, out double lon))
        {
            return lon >= -180 && lon <= 180;
        }
        return false;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var client = new HttpClient();
            var raw = await client.GetStringAsync("https://localhost:7239/geojson.json");
            JArray jsonArray = JArray.Parse(raw);
            foreach(var entry in farmhouses)
            {
                JObject newEntry = new JObject
                {
                        ["type"] = "Feature",
                        ["geometry"] = new JObject
                        {
                            ["type"] = "Point",
                            ["coordinates"] = new JArray(entry.Longitude, entry.Latitude)
                        },
                        ["properties"] = new JObject
                        {
                            ["name"] = entry.Name
                        }
                };

                jsonArray.Add(newEntry);
            }

            raw = jsonArray.ToString();

            module = await JSRuntime.InvokeAsync<IJSObjectReference>("import", "./js/leafletmap.js");
            if (module != null)
            {
                result = await module.InvokeAsync<string>("load_map", Convert.ToString(raw), 52, 20);
            }
        }
    }

    async ValueTask IAsyncDisposable.DisposeAsync()
    {
        if (module is not null)
        {
            await module.DisposeAsync();
        }
    }
}
