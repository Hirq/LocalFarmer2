@page "/mapfarmhouses"
@using Newtonsoft.Json.Linq
@inject IFarmhouseService FarmhouseService
@inject IJSRuntime JSRuntime
@implements IAsyncDisposable
<PageTitle>Map with all farmhouses</PageTitle>

<h2>1 Map - A lot farmhouses</h2>
<h2>MAPA</h2>
<div id="map" style="height:70vh; width: 100%"></div>
@code {
    [Parameter]
    public List<Farmhouse> farmhouses { get; set; }
    public Farmhouse farmhouse = new Farmhouse();
    public Farmhouse farmhouse2 = new Farmhouse();
    public int Id { get; set; }

    private IJSObjectReference? module;
    private string? result;


    // public override async Task SetParametersAsync(ParameterView parameters)
    // {
    //     farmhouses = await FarmhouseService.GetFarmhouses();
    // }  
    
    protected override async Task OnInitializedAsync()
    {
        farmhouses = await FarmhouseService.GetFarmhouses();
        farmhouse = farmhouses.FirstOrDefault();
        farmhouse2 = farmhouses.LastOrDefault();
        foreach (var x in farmhouses)
        {
            Console.WriteLine(x.Name);
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var client = new HttpClient();
            var raw = await client.GetStringAsync("https://localhost:7239/geojson.json");

            // string sciezkaDoPliku = System.IO.Path.Combine(AppContext.BaseDirectory, "Utilities", "geojson.json");
            // string jsonZawartosc = System.IO.File.ReadAllText(sciezkaDoPliku);

            JArray jsonArray = JArray.Parse(raw);
            JObject firstElement = (JObject)jsonArray[0];

            firstElement["geometry"]["coordinates"] = new JArray(farmhouse.Latitude, farmhouse.Longitude);
            firstElement["properties"]["name"] = farmhouse.Name;

            raw = jsonArray.ToString();

            module = await JSRuntime.InvokeAsync<IJSObjectReference>("import", "./js/leafletmap.js");
            if (module != null)
            {
                result = await module.InvokeAsync<string>("load_map", Convert.ToString(raw), farmhouse.Latitude, farmhouse.Longitude);
            }
        }
    }

    async ValueTask IAsyncDisposable.DisposeAsync()
    {
        if (module is not null)
        {
            await module.DisposeAsync();
        }
    }
}
