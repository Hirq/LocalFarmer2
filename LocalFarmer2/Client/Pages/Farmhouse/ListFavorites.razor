@page "/favoritefarmhouses"
@inject IFavoriteFarmhouseService FavoriteFarmhouseService
@inject IAlertService AlertService
@inject UserStateService UserStateService

<PageTitle>Farmhouses</PageTitle>

<MudTable Items="@ListFavoritesFarmhouse" SortLabel="Sort By" Hover="true" Filter="new Func<FavoriteFarmhouse,bool>(FilterFunc)" CommitEditTooltip="Commit Edit">
    <ToolBarContent>
        <MudText Typo="Typo.h6">Farmhouses</MudText>
        <MudSpacer />
        <MudTextField @bind-Value="searchString" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
    </ToolBarContent> 

    <HeaderContent>
        <MudTh><MudTableSortLabel InitialDirection="SortDirection.Ascending" SortBy="new Func<FavoriteFarmhouse, object>(x=>x.Id)">Id</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel InitialDirection="SortDirection.Ascending" SortBy="new Func<FavoriteFarmhouse, object>(x=>x.IdFarmhouse)">Id Farmhouse</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel InitialDirection="SortDirection.Ascending" SortBy="new Func<FavoriteFarmhouse, object>(x=>x.Farmhouse.Name)">Name Farmhouse</MudTableSortLabel></MudTh>
        <MudTh>Action</MudTh>
        @*        <MudTh>Products</MudTh> *@
    </HeaderContent>
    <RowTemplate>
        @* <MudTd><MudButton Variant="Variant.Outlined" Size="Size.Small" OnClick="@(() => ShowBtnPress(context.Id))">@((context.ShowDetails == true) ? "Hide" : "Show") Products</MudButton></MudTd> *@
        <MudTd DataLabel="Nr">@context.Id</MudTd>
        <MudTd DataLabel="Nr">@context.IdFarmhouse</MudTd>
        <MudTd DataLabel="Nr">@context.Farmhouse.Name</MudTd>
        <MudTd DataLabel="Edit">
                <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="() => DeleteFavorite(context.Id)">Delete</MudButton>
            @* <MudIconButton Icon="@Icons.Material.Filled.Delete" Variant="Variant.Outlined" Color="Color.Error" Size="Size.Medium" OnClick="() => DeleteProduct(context.Id)" /> *@
        </MudTd>
@*             <MudTd DataLabel="Molar mass"><MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="() => ShowFarmhouse(context.Id)">Go to detail</MudButton></MudTd>
            <MudTd DataLabel="Molar mass"><MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="() => ShowProducts(context.Id)">Show products</MudButton></MudTd> *@
        </RowTemplate>

@*         <ChildRowContent>
            @if (context.ShowDetails)
        {
            <MudTr>
                <td colspan="4">
                    <MudCard Outlined="true" Elevation="0" Class="list-products">
                        <MudCardHeader>
                            <CardHeaderContent>
                                <MudText Typo="Typo.body1" Class="text-white">Products for <strong>@context.Name</strong></MudText>
                            </CardHeaderContent>
                        </MudCardHeader>
                        <MudCardContent Class="pa-0">
                            <MudTable Items="@context.Products" Context="ProductContext" Hover="true" Breakpoint="Breakpoint.Sm" Elevation="0">
                                <ColGroup>
                                    <col />
                                    <col />
                                    <col style="width:200px;" />
                                </ColGroup>
                                <HeaderContent>
                                    <MudTh>Name</MudTh>
                                    <MudTh>Prize one</MudTh>
                                    <MudTh>Description</MudTh>
                                </HeaderContent>
                                <RowTemplate>
                                    <MudTd DataLabel="Address Line 1">@ProductContext.Name</MudTd>
                                        <MudTd DataLabel="Address Line 2">@ProductContext.PrizeOne</MudTd>
                                        <MudTd DataLabel="Postal Code">@ProductContext.Description</MudTd>
                                    </RowTemplate>
                                </MudTable>
                            </MudCardContent>
                        </MudCard>
                    </td>
                </MudTr>
        }
    </ChildRowContent> *@

    <PagerContent>
        <MudTablePager PageSizeOptions="new int[]{50, 100}" />
    </PagerContent>
</MudTable>



    @code {
    List <FavoriteFarmhouse> ListFavoritesFarmhouse = new List<FavoriteFarmhouse>();
    private string searchString = null;
    private string userId = null;

    protected override async Task OnInitializedAsync()
    {
        userId = UserStateService.CurrentUser.IdUser;
        ListFavoritesFarmhouse = await FavoriteFarmhouseService.GetFavoriteFarmhousesForUser(userId);
    }

    private async void DeleteFavorite(int idFarmhouse)
    {
        var deletedFarmhouse = ListFavoritesFarmhouse.FirstOrDefault(x => x.Id == idFarmhouse);
        if (deletedFarmhouse != null)
        {
            await FavoriteFarmhouseService.DeleteFavorite(idFarmhouse);
            ListFavoritesFarmhouse.Remove(deletedFarmhouse);
            StateHasChanged();
            AlertService.SetDeleteAlert($"Deleted subscribe farmhouse {idFarmhouse}");
        }
    }

    private bool FilterFunc(FavoriteFarmhouse farmhouse)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        // if (farmhouse.IdFarmhouse.Contains(searchString, StringComparison.OrdinalIgnoreCase))
        //     return true;
        // if (farmhouse.Address.Contains(searchString, StringComparison.OrdinalIgnoreCase))
        //     return true;
        // if (farmhouse.Description.Contains(searchString, StringComparison.OrdinalIgnoreCase))
        //     return true;
        if ($"{farmhouse.IdFarmhouse} {farmhouse.Id}".Contains(searchString))
            return true;
        return false;
    }
}
