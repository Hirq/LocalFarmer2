@page "/addFarmhouse"
@inject IMapper mapper
@inject IAccountService AccountService
@inject IFarmhouseService FarmhouseService
@inject IJSRuntime JSRuntime
@inject IAlertService AlertService
@inject UserStateService UserStateService
@inject NavigationManager NavigationManager
@inject ValidateService ValidateService
@inject FileService FileService

<AuthorizeView>
    <EditForm Model="farmhouseDto" OnValidSubmit="OnValidSubmit" Context="editForm">
        <DataAnnotationsValidator />
        <MudGrid>
            <MudItem xs="12">
                <MudText Class="d-flex justify-center" Typo="Typo.h6">@loc["Farmhouse_Add_Farmhouse"]</MudText>
                <MudPaper Class="pa-4">
                    <MudTextField T="string" Label="@loc["X_Name"]" @bind-Value="farmhouseDto.Name" @ref="farmhouseNameField" Required="true" RequiredError="@loc["Validation_Required"]" />
                    <MudTextField T="string" Label="@loc["X_Description"]" @bind-Value="farmhouseDto.Description" />
                    <MudTextField T="string" Label="@loc["Farmhouse_Address"]" @bind-Value="farmhouseDto.Address" />
                    <MudTextField T="string" Label="@loc["Farmhouse_Phone"]" @bind-Value="farmhouseDto.Phone" />
                    <MudTextField T="string" Label="Email" @bind-Value="farmhouseDto.Email" />
                    <MudSelect T="string" Label="@loc["Farmhouse_Payment_Methods"]" MultiSelection="true" SelectAll="true" @ref="paymentMethodsField" Required="true" @bind-Value="@farmhouseDto.PaymentMethods" @bind-SelectedValues="SelectedPayment">
                        @foreach (var method in PaymentMethodInfo.PaymentMethods)
                        {
                            <MudSelectItem T="string" Value="@method">@method</MudSelectItem>
                        }
                    </MudSelect>
                    <EditFile Name="@loc["Farmhouse_Photo"]" Model="@farmhouseDto" IsOpenPhoto=false />
                    <MudTextField Disabled Id="latitude_input" Label="@loc["Farmhouse_Latitude"]" @bind-Value="farmhouseDto.Latitude" @ref="latitudeField" Required="true" Placeholder="Max 90" RequiredError="Latitude is required!" />
                    <MudTextField Disabled Id="longitude_input" Label="@loc["Farmhouse_Longitude"]" @bind-Value="farmhouseDto.Longitude" @ref="longitudeField" Required="true" Placeholder="Max 180" RequiredError="Longitude is required!" />
                </MudPaper>
                <MudPaper Class="pa-4 mt-4">
                    <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary">@loc["X_Save"]</MudButton>
                </MudPaper>
            </MudItem>
        </MudGrid>
    </EditForm>
    <div id="map" style="height: 400px;"></div>

</AuthorizeView>
    @code {
    private IJSObjectReference? module;
    private string? result;
    private string? latitude;
    private string? longitude;
    // private UserDto? currentUser;
    // private bool isUserSignUp;
    public int Id { get; set; }
    private AddFarmhouseDto farmhouseDto = new AddFarmhouseDto();
    private IEnumerable<string> SelectedPayment { get; set; } = PaymentMethodInfo.DefaultPayment;
    private MudTextField<string> farmhouseNameField;
    private MudTextField<string> latitudeField;
    private MudTextField<string> longitudeField;
    private MudSelect<string> paymentMethodsField;

    protected async override Task OnInitializedAsync()
    {
        // isUserSignUp = await AccountService.IsUserSignUp();

        // if (isUserSignUp)
        // {
        //     currentUser = await AccountService.GetCurrentUser();
        //     UserStateService.CurrentUser = currentUser;
        //     var farmhouse = await FarmhouseService.GetFarmhouse((int)currentUser?.IdFarmhouse!);
        //     farmhouseDto = mapper.Map<FarmhouseDto>(farmhouse);
        // }

        FileService.ClearVariables();
    }

    private async void OnValidSubmit(EditContext context)
    {
        if (module != null)
        {
            latitude = await module.InvokeAsync<string>("getValueById", "latitude_input");
            longitude = await module.InvokeAsync<string>("getValueById", "longitude_input");
        }

        farmhouseDto.Latitude = latitude;
        farmhouseDto.Longitude = longitude;

        var fieldsToValidate = new List<FieldToValidate>
        {
            new FieldToValidate(latitudeField, farmhouseDto.Latitude),
            new FieldToValidate(longitudeField, farmhouseDto.Longitude),
            new FieldToValidate(paymentMethodsField, farmhouseDto.PaymentMethods)
        };

        //TODO: Moze tego IdUser też do ValidationService przerzucić

        context.Validate();

        if (ValidateService.ValidateMudTextFields(fieldsToValidate))
        {
            return;
        }

        farmhouseDto.IdUser = UserStateService.CurrentUser?.IdUser;
        if (farmhouseDto.IdUser == null)
        {
            throw new Exception("null iduser");
        }     

        var idFarmhouse = await FarmhouseService.AddFarmhouse(farmhouseDto);
        UserStateService.CurrentUser.FarmhouseName = farmhouseDto.Name;
        UserStateService.CurrentUser.IdFarmhouse = idFarmhouse;
        AlertService.SetSuccessAlert($"Successfully add farmhouse {farmhouseDto.Name}");
        NavigationManager.NavigateTo("/");
        _ = AlertService.ClearAlertAfterDelay();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await farmhouseNameField.FocusAsync();
            module = await JSRuntime.InvokeAsync<IJSObjectReference>("import", "./js/leafletmap.js");
            if (module != null)
            {
                result = await module.InvokeAsync<string>("setCoordinates", "map");
                Console.WriteLine(result);
            }
        }
    }

}