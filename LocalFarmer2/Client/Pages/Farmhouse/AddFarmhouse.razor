@page "/addFarmhouse"
@inject IMapper mapper
@inject IAccountService AccountService
@inject IFarmhouseService FarmhouseService
@inject IJSRuntime JSRuntime
@inject UserStateService UserStateService
@inject AlertService alertService
@inject NavigationManager NavigationManager
<AuthorizeView>
    <EditForm Model="farmhouseDto" OnValidSubmit="OnValidSubmit" Context="editForm">
        <DataAnnotationsValidator />
        <MudGrid>
            <MudItem xs="12">
                <MudText Class="d-flex justify-center" Typo="Typo.h6">Settings</MudText>
                <MudPaper Class="pa-4">

                    <MudTextField T="string" Label="Farmhouse name" @bind-Value="farmhouseDto.Name" Required="true" RequiredError="Farmhouse name is required!" />
                    <MudTextField T="string" Label="Description" @bind-Value="farmhouseDto.Description" />
                    <MudTextField T="string" Label="Address" @bind-Value="farmhouseDto.Address" />
                    <MudTextField T="string" Label="Phone" @bind-Value="farmhouseDto.Phone" />
                    <MudTextField Disabled Id="latitude_input" Label="Latitude" @bind-Value="farmhouseDto.Latitude" Required="true" Placeholder="Max 90" RequiredError="Latitude is required!" />
                    <MudTextField Disabled Id="longitude_input"Label="Longitude" @bind-Value="farmhouseDto.Longitude" Required="true" Placeholder="Max 180" RequiredError="Longitude is required!" />
                </MudPaper>
                <MudPaper Class="pa-4 mt-4">
                    <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary">Save</MudButton>
                </MudPaper>
            </MudItem>
        </MudGrid>
    </EditForm>
    <div id="map" style="height: 400px;"></div>

</AuthorizeView>
@code {
    private IJSObjectReference? module;
    private string? result;
    private string? latitude;
    private string? longitude;
    private UserDto? currentUser;
    private bool isUserSignUp;
    public int Id { get; set; }
    private AddFarmhouseDto farmhouseDto = new AddFarmhouseDto();

    protected async override Task OnInitializedAsync()
    {
        // isUserSignUp = await AccountService.IsUserSignUp();

        // if (isUserSignUp)
        // {
        //     currentUser = await AccountService.GetCurrentUser();
        //     UserStateService.CurrentUser = currentUser;
        //     var farmhouse = await FarmhouseService.GetFarmhouse((int)currentUser?.IdFarmhouse!);
        //     farmhouseDto = mapper.Map<FarmhouseDto>(farmhouse);
        // }
    }

    private async void OnValidSubmit(EditContext context)
    {
        if (module != null)
        {
            latitude = await module.InvokeAsync<string>("getValueById", "latitude_input");
            longitude = await module.InvokeAsync<string>("getValueById", "longitude_input");
        }

        farmhouseDto.Latitude = latitude;
        farmhouseDto.Longitude = longitude;

        farmhouseDto.IdUser = UserStateService.CurrentUser?.IdUser;
        if (farmhouseDto.IdUser == null)
        {
            throw new Exception("null iduser");
        }
        await FarmhouseService.AddFarmhouse(farmhouseDto);
        alertService.SetSuccessAlert($"Successfully add farmhouse {farmhouseDto.Name}");
        NavigationManager.NavigateTo("/");
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            module = await JSRuntime.InvokeAsync<IJSObjectReference>("import", "./js/leafletmap.js");
            if (module != null)
            {
                result = await module.InvokeAsync<string>("setCoordinates", "map");
                Console.WriteLine(result);
            }
        }
    }
}