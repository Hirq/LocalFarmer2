@page "/farmhouse/{id:int}"
@using Newtonsoft.Json.Linq
@inject IFarmhouseService FarmhouseService
@inject IJSRuntime JSRuntime
@implements IAsyncDisposable
<PageTitle>Farmhouse</PageTitle>

<h2>@farmhouse.Name - @farmhouse.Id</h2>
<h2>Latitude - @farmhouse.Latitude </h2>
<h2>Longitude - @farmhouse.Longitude</h2>
<h2>Tip: Network => disable cache set true</h2>
<h2>MAPA</h2>
<div id="map" style="height:70vh; width: 100%"></div>
@code {
    [Parameter]
    public int Id { get; set; }

    private IJSObjectReference? module;
    private string? result;

    Farmhouse farmhouse = new Farmhouse();

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        farmhouse = await FarmhouseService.GetFarmhouse(Id);
        if (firstRender)
        {
            var client = new HttpClient();
            var raw = await client.GetStringAsync("https://localhost:7239/geojson.json");

            // string sciezkaDoPliku = System.IO.Path.Combine(AppContext.BaseDirectory, "Utilities", "geojson.json");
            // string jsonZawartosc = System.IO.File.ReadAllText(sciezkaDoPliku);

            JArray jsonArray = JArray.Parse(raw);
            JObject firstElement = (JObject)jsonArray[0];

            firstElement["geometry"]["coordinates"] = new JArray(farmhouse.Latitude, farmhouse.Longitude);
            firstElement["properties"]["name"] = farmhouse.Name;

            raw = jsonArray.ToString();

            module = await JSRuntime.InvokeAsync<IJSObjectReference>("import", "./js/leafletmap.js");
            if (module != null)
            {
                result = await module.InvokeAsync<string>("load_map", Convert.ToString(raw), farmhouse.Latitude, farmhouse.Longitude);
            }
        }
    }

    async ValueTask IAsyncDisposable.DisposeAsync()
    {
        if (module is not null)
        {
            await module.DisposeAsync();
        }
    }
}
