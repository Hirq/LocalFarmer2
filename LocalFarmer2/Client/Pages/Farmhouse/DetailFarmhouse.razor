@page "/farmhouse/{id:int}"
@inherits BasePage
@using Newtonsoft.Json.Linq
@inject IFarmhouseService FarmhouseService
@inject IAccountService AccountService
@inject IOpinionService OpinionService
@inject IJSRuntime JSRuntime
@inject UtilsService UtilsService
@inject NavigationManager NavigationManager
@inject ValidateService ValidateService
@inject UserStateService UserStateService
@inject AppSettings AppSettings
@implements IAsyncDisposable

<PageTitle>@loc["X_Farmhouse"] | @Globals.AppName</PageTitle>

@if (isLoading)
{
    <MudProgressCircular Class="m-4" Color="Color.Primary" />
}
else if (!string.IsNullOrEmpty(errorMessage))
{
    <MudAlert Severity="Severity.Error">@errorMessage</MudAlert>
}
else
    {
    <MudPaper Class="pa-4">
        <MudStack Spacing="2">
            <div class="d-flex justify-space-between">
                <div>
                    <MudButton Class="product-details-button" Variant="Variant.Outlined" Color="Color.Primary" OnClick="OnExpandCollapsePrimary">@(_expandedPrimary ? @loc["Button_Basic_Info"] : @loc["Button_Basic_Info"])</MudButton>
                </div>
                <div>
                    <MudButton Class="product-details-button" Variant="Variant.Filled" Color="Color.Primary" OnClick="ShowAllProducts">@loc["Button_All_Products"]</MudButton>
                </div>
            </div>

            <MudCollapse Expanded="_expandedPrimary">
                <MudGrid>
                    <MudItem xs="1">
                            <div class="fw-bolder"> @loc["X_Name"] </div>
                    </MudItem>
                    <MudItem xs="11">
                        @farmhouse.Name
                    </MudItem>
                    <MudItem xs="1">
                        <div class="fw-bolder"> @loc["X_Description"] </div>
                    </MudItem>
                    <MudItem xs="11">
                        @farmhouse.Description
                    </MudItem>
                    <MudItem xs="1">
                        <div class="fw-bolder"> @loc["Farmhouse_Address"] </div>
                    </MudItem>
                    <MudItem xs="11">
                        @farmhouse.Address
                    </MudItem>
                    <MudItem xs="1">
                        <div class="fw-bolder"> @loc["Farmhouse_Phone"] </div>
                    </MudItem>
                    <MudItem xs="11">
                        @farmhouse.Phone
                    </MudItem>
                    <MudItem xs="1">
                        <div class="fw-bolder"> Email </div>
                    </MudItem>
                    <MudItem xs="11">
                        @farmhouse.Email
                    </MudItem>
                </MudGrid>
            </MudCollapse>
            @if (farmhouse.ImageData != null && !string.IsNullOrEmpty(farmhouse.ImageMimeType))
            {
                <MudButton Class="product-details-button" Variant="Variant.Outlined" Color="Color.Primary" OnClick="OnExpandCollapsePhoto">@(_expandedPhoto ? @loc["Button_Hide_Photo"] : @loc["Button_Show_Photo"])</MudButton>
                <MudCollapse Expanded="_expandedPhoto">
                    <img src="@($"data:{farmhouse.ImageMimeType};base64,{Convert.ToBase64String(farmhouse.ImageData)}")" alt="Product Image" />
                </MudCollapse>
            }
            <MudButton Class="product-details-button" Variant="Variant.Outlined" Color="Color.Primary" Disabled=!isHaveOpinion OnClick="OnExpandCollapseOpinions">@(_expandedOpinions ? @loc["X_Opinions"] : @loc["X_Opinions"])</MudButton>
            <MudCollapse Expanded="_expandedOpinions">
                <MudGrid>
                    <MudItem xs="12">
                        <MudText> @loc["Farmhouse_Average_Rating"] @(average?.ToString().Length >= 4 ? average.ToString().Substring(0, 4) : average.ToString())</MudText>
                    </MudItem>
                    @foreach (var card in listOpinionSelected)
                    {
                        <MudItem xs="2">
                            <MudCard Outlined="true">
                                <MudCardContent>
                                    <MudText>@card.Rating</MudText>
                                    <MudText Typo="Typo.body2">@(card.Comment.Length > 100 ? card.Comment.Substring(0, 95) + "..." : card.Comment)</MudText>
                                </MudCardContent>
                            </MudCard>
                        </MudItem>
                    }
                    <MudItem xs="12">
                        <MudButton Class="product-details-button" Variant="Variant.Filled" Color="Color.Primary"
                                   OnClick='() => UtilsService.OpenDialogWithCards("All opinions", listOpinionAll)'>Wszystkie opinie - @listOpinionAll.Count()</MudButton>
                    </MudItem>
                </MudGrid>
            </MudCollapse>
            <MudButton Style="@buttonStyle" Class="product-details-button" Variant="Variant.Outlined" Color="Color.Primary" OnClick='() => GoToChatMessage()' Disabled=isViewMyFarmhouse>@loc["Farmhouse_Send_Message"] Chat</MudButton>
            <MudButton Class="product-details-button" Variant="Variant.Outlined" Color="Color.Primary" OnClick='() => UtilsService.OpenDialogSendMessage(isContactToAdmin: false, emailTo: farmhouse.Email)' Disabled=isViewMyFarmhouse>@loc["Farmhouse_Send_Message"] Email</MudButton>
            <MudButton Class="product-details-button" Variant="Variant.Outlined" Color="Color.Primary" OnClick="OnExpandCollapseMaps">@(_expandedMap ? @loc["Dashboard_Map"] : @loc["Dashboard_Map"])</MudButton>
            <MudCollapse Expanded="_expandedMap">
                @*                 
                <h2>Latitude: @farmhouse.Latitude </h2>
                <h2>Longitude: @farmhouse.Longitude</h2>
                <h2>Tip: Network => disable cache set true</h2> 
                *@
                <div id="map" style="height:70vh; width: 100%"></div>
            </MudCollapse>
        </MudStack>
    </MudPaper>
}

@code {
    [Parameter]
    public int Id { get; set; }

    public string IdUser { get; set; }
    public List<Opinion> listOpinionSelected = new List<Opinion>();
    public List<Opinion> listOpinionAll = new List<Opinion>();
    Farmhouse farmhouse = new Farmhouse();
    private IJSObjectReference? module;
    public double? average { get; set; }
    private string? result;
    private bool _expandedPrimary = true;
    private bool _expandedPrice = false;
    private bool _expandedPhoto = false;
    private bool _expandedOpinions = false;
    private bool _expandedMap = true;
    private bool isHaveOpinion = false;
    private bool isViewMyFarmhouse = false;
    private string? buttonStyle;

    protected override async Task LoadDataAsync()
    {
        farmhouse = await FarmhouseService.GetFarmhouse(Id);
        IdUser = (await AccountService.GetUserByFarmhouseId(Id)).IdUser;
        listOpinionAll = await OpinionService.AllOpinionsForFarmhouse(Id);
        if (listOpinionAll.Count > 0)
        {
            average = await OpinionService.AverageForFarmhouse(Id);
            isHaveOpinion = true;
            listOpinionSelected = await OpinionService.GetRandomOpinionsForFarmhouse(Id, 6);
        }
        if (farmhouse.Id == UserStateService.CurrentUser?.IdFarmhouse)
        {
            isViewMyFarmhouse = true;
        }
        SetStyle();
    }

    protected override async Task OnParametersSetAsync()
    {
        if (HasError)
        {
            return;
        }

        var client = new HttpClient();
        var raw = await client.GetStringAsync(AppSettings.GeoJsonUrl);
        JArray jsonArray = JArray.Parse(raw);
        JObject newEntry = new JObject
        {
            ["type"] = "Feature",
            ["geometry"] = new JObject
            {
                ["type"] = "Point",
                ["coordinates"] = new JArray(farmhouse.Longitude, farmhouse.Latitude)
            },
            ["properties"] = new JObject
            {
                ["name"] = farmhouse.Name
            }
        };

        jsonArray.Add(newEntry);
        raw = jsonArray.ToString();

        module = await JSRuntime.InvokeAsync<IJSObjectReference>("import", "./js/leafletmap.js");
        if (module != null)
        {
            result = await module.InvokeAsync<string>("load_map", Convert.ToString(raw), farmhouse.Latitude, farmhouse.Longitude);
        }
    }

    private void OnExpandCollapsePhoto()
    {
        _expandedPhoto = !_expandedPhoto;
    }

    private void OnExpandCollapsePrimary()
    {
        _expandedPrimary = !_expandedPrimary;
    }

    private void OnExpandCollapsePrice()
    {
        _expandedPrice = !_expandedPrice;
    }

    private void OnExpandCollapseOpinions()
    {
        _expandedOpinions = !_expandedOpinions;
        SetStyle();
    }

    private void OnExpandCollapseMaps()
    {
        _expandedMap = !_expandedMap;
    }

    private void ShowAllProducts()
    {
        NavigationManager.NavigateTo($"productsFarmhouse/{Id}");
    }    

    private void GoToChatMessage()
    {
        NavigationManager.NavigateTo($"chatpriv/{IdUser}");
    }

    async ValueTask IAsyncDisposable.DisposeAsync()
    {
        if (module is not null)
        {
            await module.DisposeAsync();
        }
    }

    private void SetStyle()
    {
        if (!isHaveOpinion)
        {
            buttonStyle = "margin-top: -7px;";
        }
        else
        {
            buttonStyle = string.Empty;
        }

        if (!_expandedOpinions)
        {
            buttonStyle = "margin-top: -7px;";
        }
        else
        {
            buttonStyle = string.Empty;
        }
    }
}
