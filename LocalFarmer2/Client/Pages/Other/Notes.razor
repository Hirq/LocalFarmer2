@page "/notes"
@inject UtilsService UtilsService
@inject UserStateService UserStateService
@inject INoteService NoteService
@inject IMapper Mapper
@inject IJSRuntime JSRuntime

<MudText Class="d-flex justify-center" Typo="Typo.h6">@loc["X_Notes"]</MudText>

<MudPaper Class="pa-4 d-flex justify-space-between">
    <div>
        <MudButton Color="Color.Primary" Variant="Variant.Filled" OnClick="@(() => AddNotePopup())">@loc["Note_Add_Note"]</MudButton>
     </div>
     <div>
        <MudButton Color="Color.Warning" Variant="Variant.Filled" Class="noteButtonFilter" OnClick="@(() => ChangeFilter())">@FilterName</MudButton>
        <div class="position-indicators">
            <div class="indicator @(FilterNotes == 2 ? "active" : "")" onclick="@(() => setFilter(1))"></div>
            <div class="indicator @(FilterNotes == 0 ? "active" : "")" onclick="@(() => setFilter(2))"></div>
            <div class="indicator @(FilterNotes == 1 ? "active" : "")" onclick="@(() => setFilter(0))"></div>
        </div>
     </div>
 </MudPaper>

<MudGrid id="noteMudGrid">
    @if (listNotes?.Count > 0)
    {
        @foreach (var item in listNotes)
        {
        <MudItem xs="4">
            <div class="flip-card @((item.IsFlipped ? "flipped" : ""))" @onclick="() => FlipCard(item)">
                <div class="flip-card-inner">
                    <div class="flip-card-front d-flex align-center justify-center mud-width-full py-8">
                        <div class="d-flex flex-column noteText">
                            <MudText Typo="Typo.h5" Class="text-center">@item.Name</MudText>
                            <div class="text-center">
                                <MudIconButton Icon="@Icons.Material.Filled.Edit" Variant="Variant.Filled" Color="Color.Primary" Size="Size.Medium" OnClick="@(() => EditNotePopup(item))"/>
                                <MudIconButton Icon="@Icons.Material.Filled.Delete" Variant="Variant.Filled" Color="Color.Error" Size="Size.Medium" OnClick='() => UtilsService.OpenDialog(dialogData, () => DeleteNote(item.Id), Color.Error)'/>
                            </div>
                        </div>
                    </div>
                    <div class="flip-card-back d-flex align-center justify-center mud-width-full py-8">
                        <div class="d-flex flex-column noteText">
                            <MudText Typo="Typo.body1">@item.Text</MudText>
                        </div>
                    </div>
                </div
            </div>
        </MudItem>
        }
    }
</MudGrid>


@code {
    public Note note { get; set; } = new Note();
    public List<NoteViewModel> listNotes { get; set; }
    public List<NoteViewModel> originalNotesList = new List<NoteViewModel>();
    public DialogData dialogData = new DialogData();

    /*
    0 - All
    1 - Only Active
    2 - Only Archive
    */
    private int FilterNotes = 1;
    private string FilterName;

    protected override async Task OnInitializedAsync()
    {
        await InitializeNotesList();
        note.IdUser = UserStateService.CurrentUser.IdUser;
        dialogData = new DialogData()
        {
            Title = $"{loc["X_Delete"]} {loc["X_Note"]}",
            ButtonName = loc["X_Delete"],
            Content = $"{loc["X_Are_You_Sure_Delete_This"]} {loc["X_Note"]}",
        };
        ChangeFilter();
    }

    private async Task InitializeNotesList()
    {
        var notesList = await NoteService.GetAll();
        originalNotesList = Mapper.Map<List<NoteViewModel>>(notesList);
        listNotes = originalNotesList;
    }

    private void setFilter(int filtr)
    {
        FilterNotes = filtr;
        ChangeFilter();
    }

    private void ChangeFilter()
    {
        FilterNotes = (FilterNotes + 1) % 3;
        if (FilterNotes == 1)
        {
            listNotes = originalNotesList;
            FilterName = loc["Filter_All"];
        }
        else if (FilterNotes == 2)
        {
            listNotes = originalNotesList.Where(x => !x.IsArchive).ToList();
            FilterName = loc["Filter_Only_Active"];

        }
        else if (FilterNotes == 0)
        {
            listNotes = originalNotesList.Where(x => x.IsArchive).ToList();
            FilterName = loc["Filter_Only_Archive"];
        }
    }

    private void FlipCard(NoteViewModel item)
    {
        item.IsFlipped = !item.IsFlipped;
        JSRuntime.InvokeVoidAsync("checkScrolls");
    }

    private async Task AddNote()
    {
        await NoteService.AddNote(note);
        await InitializeNotesList();
        StateHasChanged();
    }

    private async Task AddNotePopup()
    {
        note.Name = string.Empty;
        note.Text = string.Empty;
        UtilsService.OpenDialogNoteCards(loc["Note_Add_Note"], loc["X_Save"], note, async () => await AddNote());
    }

    private async Task EditNote(NoteViewModel item)
    {
        note.Id = item.Id;
        await NoteService.EditNote(note);
        await InitializeNotesList();
        StateHasChanged();
    }

    private async Task EditNotePopup(NoteViewModel item)
    {
        note.Name = item.Name;
        note.Text = item.Text;
        UtilsService.OpenDialogNoteCards(loc["Note_Edit_Note"], loc["X_Save"], note, async () => await EditNote(item));
    }

    private async Task DeleteNote(int id)
    {
        await NoteService.DeleteNote(id);
        await InitializeNotesList();
        StateHasChanged();
    }
}
