@page "/notes"
@inject UtilsService UtilsService
@inject UserStateService UserStateService
@inject INoteService NoteService
@inject IMapper Mapper

<h3>Notes</h3>
<MudButton Color="Color.Primary" Variant="Variant.Filled" OnClick="@(() => UtilsService.OpenDialogNoteCards("Add note", @loc["X_Save"], note, async () => await AddNote()))"> Add note </MudButton>
<MudButton Color="Color.Warning" Variant="Variant.Filled" OnClick="@(() => ChangeFilter())">@FilterName</MudButton>

@* <MudGrid>
    @if(originalNotesList?.Count > 0)
    {
        @foreach(var item in originalNotesList)
        {
            <MudItem xs="4">
                <MudPaper Class="d-flex align-center justify-center mud-width-full py-8">
                    <div class="d-flex flex-column">
                        <MudText Typo="Typo.h5">@item.Name</MudText>
                        <MudText Typo="Typo.body1">@item.Text</MudText>
                    </div>
                </MudPaper>
            </MudItem>
        }
    }
</MudGrid> *@

<MudGrid>
    @if (listNotes?.Count > 0)
    {
        @foreach (var item in listNotes)
        {
        <MudItem xs="4">
            <div class="flip-card @((item.IsFlipped ? "flipped" : ""))" @onclick="() => FlipCard(item)">
                <div class="flip-card-inner">
                    <div class="flip-card-front d-flex align-center justify-center mud-width-full py-8">
                        <div class="d-flex flex-column">
                            <MudText Typo="Typo.h5">@item.Name</MudText>
                        </div>
                    </div>
                    <div class="flip-card-back d-flex align-center justify-center mud-width-full py-8">
                        <div class="d-flex flex-column">
                            <MudText Typo="Typo.body1">@item.Text</MudText>
                        </div>
                    </div>
                </div>
            </div>
        </MudItem>
        }
    }
</MudGrid>


@code {
    public Note note { get; set; } = new Note();
    public List<NoteViewModel> listNotes { get; set; }
    public List<NoteViewModel> originalNotesList = new List<NoteViewModel>();
    /*
    0 - All
    1 - Only Active
    2 - Only Archive
    */
    private int FilterNotes = 1;
    private string FilterName;

    protected override async Task OnInitializedAsync()
    {
        await InitializeNotesList();
        note.IdUser = UserStateService.CurrentUser.IdUser;
        ChangeFilter();
    }

    private async Task InitializeNotesList()
    {
        var notesList = await NoteService.GetAll();
        originalNotesList = Mapper.Map<List<NoteViewModel>>(notesList);
        listNotes = originalNotesList;
    }

    private async Task AddNote()
    {
        await NoteService.AddNote(note);
        await InitializeNotesList();
        StateHasChanged();
    }
    //TODO: Przycisk jakby był a paskiem na dole, że można wybrać 1 z 3 filtrów podświetlony jaki jest aktwny.

    private void ChangeFilter()
    {
        if (FilterNotes == 0)
        {
            listNotes = originalNotesList;
            FilterNotes = 1;
            FilterName = loc["Filter_Show_Only_Active"];
        }
        else if (FilterNotes == 1)
        {
            listNotes = originalNotesList.Where(x => !x.IsArchive).ToList();
            FilterNotes = 2;
            FilterName = loc["Filter_Show_Only_Archive"];

        }
        else if (FilterNotes == 2)
        {
            listNotes = originalNotesList.Where(x => x.IsArchive).ToList();
            FilterNotes = 0;
            FilterName = loc["Filter_Show_All"];
        }
    }

    private void FlipCard(NoteViewModel item)
    {
        item.IsFlipped = !item.IsFlipped;
    }

}
