@page "/notes"
@inject UtilsService UtilsService
@inject INoteService NoteService

<h3>Notes</h3>
<MudButton Color="Color.Primary" Variant="Variant.Filled" OnClick="@(() => UtilsService.OpenDialogNoteCards("Add note", @loc["X_Save"], note, () => AddNote()))"> Add note </MudButton>
<MudButton Color="Color.Warning" Variant="Variant.Filled" OnClick="@(() => FilterArchive())"> Only favorite </MudButton>

@* <MudGrid>
    @if(originalNotesList?.Count > 0)
    {
        @foreach(var item in originalNotesList)
        {
            <MudItem xs="4">
                <MudPaper Class="d-flex align-center justify-center mud-width-full py-8">
                    <div class="d-flex flex-column">
                        <MudText Typo="Typo.h5">@item.Name</MudText>
                        <MudText Typo="Typo.body1">@item.Text</MudText>
                    </div>
                </MudPaper>
            </MudItem>
        }
    }
</MudGrid> *@

<MudGrid>
    @if (originalNotesListTest?.Count > 0)
    {
        @foreach (var item in originalNotesListTest)
        {
        <MudItem xs="4">
            <div class="flip-card @((item.IsFlipped ? "flipped" : ""))" @onclick="() => FlipCard(item)">
                <div class="flip-card-inner">
                    <div class="flip-card-front d-flex align-center justify-center mud-width-full py-8">
                        <div class="d-flex flex-column">
                            <MudText Typo="Typo.h5">@item.Name</MudText>
                        </div>
                    </div>
                    <div class="flip-card-back d-flex align-center justify-center mud-width-full py-8">
                        <div class="d-flex flex-column">
                            <MudText Typo="Typo.body1">@item.Text</MudText>
                        </div>
                    </div>
                </div>
            </div>
        </MudItem>
        }
    }
</MudGrid>


@code {
    public Note note { get; set; } = new Note();
    public List<Note> listNotes { get; set; } 
    public List<Note> originalNotesList = new List<Note>();
    public List<NoteViewModel> originalNotesListTest = new List<NoteViewModel>();
    private bool isArchiveFilterActive = false;

    protected override async Task OnInitializedAsync()
    {
        // originalNotesList = await NoteService.GetAll();

        originalNotesListTest = new List<NoteViewModel>
        {
            new NoteViewModel { Name = "Note 1", Text = "This is the first note" },
            new NoteViewModel { Name = "Note 2", Text = "This is the second note" }
        };

    }

    private void AddNote()
    {
        NoteService.AddNote(note);
    }

    private void FilterArchive()
    {
        isArchiveFilterActive = !isArchiveFilterActive;

        // if (isArchiveFilterActive)
        // {
        //     ListFarmhousesVM = originalFarmhousesList.Where(x => x.IsFavorite).ToList();
        // }
        // else
        // {
        //     ListFarmhousesVM = originalFarmhousesList;
        // }
    }

    private void FlipCard(NoteViewModel item)
    {
        item.IsFlipped = !item.IsFlipped;
    }

}
