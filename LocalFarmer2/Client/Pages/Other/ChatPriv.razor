@page "/chatpriv/{ToUserId}"
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.SignalR.Client
@inject NavigationManager NavigationManager
@inject HttpClient _httpClient
@inject UserStateService UserStateService
@inject IAccountService AccountService
@inject IJSRuntime JSRuntime

@ToUserId;
<br/>
<button @onclick="() => CheckHub()">CHECK HUB CONNECT</button>
<div style="border:0px;height:90vh;">
    <div class="panel panel-primary" style="height: 100%;">
        <div class="panel-heading top-bar">
            <div class="col-md-8 col-xs-8">
                <h3 class="panel-title">
                    @if (ToUser != null)
                    {
                        @if (ToUser.UserName != null)
                        {
                            <b>@ToUser.UserName</b>
                        }
                        else
                        {
                            <b>@ToUser.FullName</b>
                        }
                    }
                </h3>
            </div>
        </div>
        <div id="divMessageContainerBase" class="panel-body msg_container_base">
            @if (Messages != null && Messages.Count() > 0)
            {
                @foreach (var message in Messages)
                {
                    @if (message.IdUserSender == FromUserId)
                    {
                        <div class="message-container sent">
                            <div class="message-box sent-message">
                                <p>@message.Message</p>
                            </div>
                        </div>
                    }
                    else
                    {
                        <div class="message-container received">
                            <div class="message-box received-message">
                                <p>@message.Message</p>
                            </div>
                        </div>
                    }
                }
            }
        </div>
        <!--CHAT USER BOX-->
        <div class="panel-footer">
            <div class="input-group" id="myForm">
                <input id="txtMessageInput" @bind="MessageText" type="text" class="form-control input-sm chat_input"
                       placeholder="Write your message here...">
                <button class="btn btn-primary" @onclick="Send">Send</button>
            </div>
        </div>
    </div>
</div>

@code {
    [Parameter]
    public string ToUserId { get; set; }
    public UserDto ToUser { get; set; } = new UserDto();
    public string FromUserId { get; set; }
    public string MessageText { get; set; }
    public List<ChatMessageDto> Messages { get; set; } = new List<ChatMessageDto>();

    [CascadingParameter]
    public Task<AuthenticationState> authenticationStateTask { get; set; }
    private HubConnection hubConnection;

    public bool IsConnected => hubConnection.State == HubConnectionState.Connected;

    protected override async Task OnInitializedAsync()
    {
        Console.WriteLine("START");
        Console.WriteLine(ToUserId);

        FromUserId = (await AccountService.GetCurrentUser()).IdUser.ToString();

        ToUser = await AccountService.GetUserById(ToUserId);

        hubConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri("/chathub"))
            .Build();

        hubConnection.On<ChatMessageDto>("ReceiveMessage", (message) =>
        {
            Console.WriteLine("hubConnection 1");

            if (message.IdUserSender == FromUserId ||
            (message.IdUserReceiver == FromUserId && message.IdUserSender == ToUserId))
            {
                Console.WriteLine("hubConnection 2");
                Messages.Add(message);
                StateHasChanged();
            }
        });
        Console.WriteLine("OnInitializedAsync 1 - " + hubConnection.State.ToString());
        await hubConnection.StartAsync();
        Console.WriteLine("OnInitializedAsync 2 - " + hubConnection.State.ToString());
    }

    public async Task Send()
    {
        ChatMessageDto message = new ChatMessageDto();
        message.IdUserReceiver = ToUserId;
        message.IdUserSender = FromUserId;
        message.Message = MessageText;

        try
        {
            await hubConnection.SendAsync("SendMessage", message);
            Console.WriteLine("Wysłano wiadomość przez SignalR");
        }
        catch (Exception ex)
        {
            Console.WriteLine("Błąd wysyłania wiadomości SignalR: " + ex.Message);
        }

        MessageText = "";
    }

    public void CheckHub()
    {
        Console.WriteLine(hubConnection.State.ToString());
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        var module = await JSRuntime.InvokeAsync<IJSObjectReference>("import", "./js/chat.js");
        await module.InvokeVoidAsync("setScroll");
    }
}