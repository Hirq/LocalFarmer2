@page "/chatpriv/{ToUserId}"
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.SignalR.Client
@inject NavigationManager NavigationManager
@inject HttpClient _httpClient
@inject UserStateService UserStateService
@inject IAlertService AlertService
@inject IAccountService AccountService
@inject IChatMessageService ChatMessageService
@inject IJSRuntime JSRuntime

@* TODO: Zostawiamy - trzeba sprawdzić czy dobrze wyglada itd  *@

<div style="border:0px;height:90vh;">
    <div class="panel panel-primary" style="height: 100%;">
        <div class="panel-heading top-bar">
            <div class="col-md-8 col-xs-8">
                <h3 class="panel-title">
                    @if (ToUser != null)
                    {
                        @if (ToUser.UserName != null)
                        {
                            <b>@ToUser.UserName</b>
                        }
                        else
                        {
                            <b>@ToUser.FullName</b>
                        }
                    }
                </h3>
            </div>
        </div>
        <div id="chat-message-container" class="panel-body msg_container_base">
            @if (Messages != null && Messages.Count() > 0)
            {
                @foreach (var message in Messages)
                {
                    @if (message.IsSeparator == true)
                    {
                        <div class="message-container date">
                            <div class="message-box received-message">
                                <div>
                                    @($"{message.DateSent:dd.MM}")
                                </div>
                            </div>
                        </div>
                    }
                    else
                    {
                        @if (message.IdUserSender == FromUserId)
                        {
                            <div class="message-container sent">
                                <div class="message-box sent-message">
                                    <p>@message.Message</p>
                                    <p>@message.DateSent.ToShortTimeString()</p>
                                </div>
                            </div>
                        }
                        else
                        {
                            <div class="message-container received">
                                <div class="message-box received-message">
                                    <p>@message.Message</p>
                                    <p>@message.DateSent.ToShortTimeString()</p>
                                </div>
                            </div>
                        }
                    }
                }
            }
        </div>
        <!--CHAT USER BOX-->
        <div class="panel-footer">
            <div class="input-group" id="myForm">
                <input id="txtMessageInput" @bind="MessageText" type="text" class="form-control input-sm chat_input"
                       placeholder="@loc["Chat_Write_Your_Message_Here"]">
                <button id="txtMessageButton" class="btn btn-primary" @onclick="Send">@loc["Farmhouse_Send"]</button>
            </div>
        </div>
    </div>
</div>

@code {
    [Parameter]
    public string ToUserId { get; set; }
    public UserDto ToUser { get; set; } = new UserDto();
    public string FromUserId { get; set; }
    public UserDto FromUser { get; set; } = new UserDto();
    public string MessageText { get; set; }
    public ChatMessageDto dto { get; set; }
    public List<ChatMessageDto> Messages { get; set; } = new List<ChatMessageDto>();

    [CascadingParameter]
    public Task<AuthenticationState> authenticationStateTask { get; set; }
    private HubConnection hubConnection;

    public bool IsConnected => hubConnection.State == HubConnectionState.Connected;

    protected override async Task OnInitializedAsync()
    {
        FromUserId = (await AccountService.GetCurrentUser()).IdUser.ToString();
        var messageHistory = await ChatMessageService.GetChatMessages(FromUserId, ToUserId);

        foreach (var message in messageHistory)
        {
            Messages.Add(message);
        }

        ToUser = await AccountService.GetUserById(ToUserId);
        FromUser = await AccountService.GetUserById(FromUserId);

        hubConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri("/chathub"))
            .Build();

        hubConnection.On<ChatMessageDto>("ReceiveMessage", (message) =>
        {
            if (message.IdUserSender == FromUserId ||
            (message.IdUserReceiver == FromUserId && message.IdUserSender == ToUserId))
            {
                Messages.Add(message);
                StateHasChanged();
            }
        });
        await hubConnection.StartAsync();
    }

    public async Task Send()
    {
        ChatMessageDto message = new ChatMessageDto();
        message.IdUserReceiver = ToUserId;
        message.IdUserSender = FromUserId;
        message.Message = MessageText;

        try
        {
            var isTodaySeparatorUsed = false;
            var separators = Messages.Where(x => x.IsSeparator);
            foreach(var separator in separators)
            {
                @if(separator.DateSent == DateTime.Today)
                {
                    isTodaySeparatorUsed = true;
                }
            }

            @if(!isTodaySeparatorUsed)
            {
                ChatMessageDto separatorToday = new ChatMessageDto();
                separatorToday.Message = "Separator";
                separatorToday.DateSent = DateTime.Today;
                separatorToday.IsSeparator = true;

                Messages.Add(separatorToday);
            }

            await hubConnection.SendAsync("SendMessage", message);

            var messageAlert = new MessageAlert(MessageAlertEnum.NewMessageChat, FromUser.UserName);
            List<string> listUsersIds = new List<string> { message.IdUserReceiver };
            await AlertService.AddAlerts(listUsersIds, null, false, messageAlert);
        }
        catch (Exception ex)
        {
        }

        MessageText = "";
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        var module = await JSRuntime.InvokeAsync<IJSObjectReference>("import", "./js/chat.js");
        await module.InvokeVoidAsync("setScroll");
    }
}