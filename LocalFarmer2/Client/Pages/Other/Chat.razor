@page "/chat"
@inject NavigationManager NavigationManager
@inject UserStateService UserStateService
@inject IAccountService AccountService
@inject IChatMessageService ChatMessageService
@inject IAlertService AlertService
@inject IJSRuntime JSRuntime

<div class="mud-table-toolbar titlePage">
    <MudText Typo="Typo.h6">Chat</MudText>
</div>
<MudGrid Class="m-0 w-100">
    <MudItem xs="12" sm="2">
        <MudPaper Class="d-flex mud-width-full flex-column chat-user-outer-container">
            <div class="chat-user-inner-scroll">
            @foreach (var dto in lastMessages)
            {
                <MudCard Class="@string.Join(" ", "m-1", "border-1", "chat-user", IsSelected(dto) ? "active-chat" : "")" @onclick="() => GoPriv(dto.IdUserSender == FromUserId ? dto.IdUserReceiver : dto.IdUserSender)">
                    <MudCardContent>
                        <MudText Typo="Typo.body2">@dto.UserName</MudText>
                        <MudText Typo="Typo.body2">@dto.FullName</MudText>
                    </MudCardContent>
                    <MudCardActions Class="card-action-extra">
                        <MudText Typo="Typo.body2" class="@(!dto.IsLastMessageFromSender ? "bold-text" : "")">@(!dto.IsLastMessageFromSender ? dto.FullName : loc["X_Me"]): @(dto.Message.Length > 20 ? dto.Message.Substring(0, 17) + "..." : dto.Message) </MudText>
                        <MudText Class="card-action-date">@dto.DateSent</MudText>
                    </MudCardActions>
                </MudCard>
            }
            </div>
        </MudPaper>
    </MudItem>
    <MudItem xs="12" sm="10">
        <MudPaper Class="@string.Join(" ", "d-flex", "align-center", "justify-center", "mud-width-full", "h-100", !isVisible ? "invisible" : "")" id="chatMessagesPanel">
            <div class="panel panel-primary chat-message-container">
                <div class="panel-heading top-bar">
                    <div class="col-md-8 col-xs-8">
                        <h3 class="panel-title">
                            @if (ToUser != null)
                            {
                                @if (ToUser.UserName != null)
                                {
                                    <b>@ToUser.UserName</b>
                                }
                                else
                                {
                                    <b>@ToUser.FullName</b>
                                }
                            }
                        </h3>
                    </div>
                </div>
                <MudPaper Class="chat-messages" id="mud-paper-chat-message">
                    <div class="panel-body msg_container_base">
                        @if (Messages != null && Messages.Count() > 0)
                        {
                            @foreach (var message in Messages)
                            {
                                @if (message.IsSeparator == true)
                                {
                                    <div class="message-container date">
                                        <div class="message-box received-message">
                                            <div>
                                                @($"{message.DateSent:dd.MM}")
                                            </div>
                                        </div>
                                    </div>
                                }
                                else
                                {
                                    @if (message.IdUserSender == FromUserId)
                                    {
                                        <div class="message-container sent">
                                            <div class="message-box sent-message">
                                                <p>@message.Message</p>
                                                <p>@message.DateSent.ToShortTimeString()</p>
                                            </div>
                                        </div>
                                    }
                                    else
                                    {
                                        <div class="message-container received">
                                            <div class="message-box received-message">
                                                <p>@message.Message</p>
                                                <p>@message.DateSent.ToShortTimeString()</p>
                                            </div>
                                        </div>
                                    }
                                }
                            }
                        }
                    </div>
                </MudPaper>

                <!--CHAT USER BOX-->
                <div class="footer">
                    <div class="input-group">
                        <input id="txtMessageInput" @bind="MessageText" type="text" class="form-control input-sm chat_input"
                                placeholder="@loc["Chat_Write_Your_Message_Here"]">
                        <button id="txtMessageButton" class="btn btn-primary" @onclick="Send">@loc["Farmhouse_Send"]</button>
                    </div>
                </div>
            </div>
        </MudPaper>
    </MudItem>
</MudGrid>

@code {
    public IJSObjectReference module { get; set; }
    private List<ApplicationUser> usersWithHistory = new List<ApplicationUser>();
    private List<ChatLastMessageDto> lastMessages = new List<ChatLastMessageDto>();

    private HubConnection hubConnection;
    public string ToUserId { get; set; }
    public UserDto ToUser { get; set; } = new UserDto();
    public string FromUserId { get; set; }
    public UserDto FromUser { get; set; } = new UserDto();
    public string MessageText { get; set; }
    public ChatMessageDto dto { get; set; }
    public List<ChatMessageDto> Messages { get; set; } = new List<ChatMessageDto>();
    private bool isVisible = false;
    private string selectedUserId { get; set; }
    private string lastMessageDisplayed { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        module = await JSRuntime.InvokeAsync<IJSObjectReference>("import", "./js/chat.js");
        await module.InvokeVoidAsync("setScroll");
    }

    protected override async Task OnInitializedAsync()
    {
        FromUserId = UserStateService.CurrentUser?.IdUser;
        await SetLeftMenu(FromUserId);

        hubConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri("/chathub"))
            .Build();
    }

    private async Task SetLeftMenu(string idCurrentUser)
    {
        var chats = await ChatMessageService.GetUserChats(idCurrentUser);

        var startI = chats.Where(x => x.User1Id != idCurrentUser).Select(x => x.User1Id);
        var startYou = chats.Where(x => x.User2Id != idCurrentUser).Select(x => x.User2Id);
        var usersIdsWithHistory = startI.Union(startYou).ToList();
        usersWithHistory = await AccountService.GetUsersByIds(usersIdsWithHistory);

        lastMessages = await ChatMessageService.GetLastChatMessages(idCurrentUser, usersIdsWithHistory);
    }

    async Task GoPriv(string idReceiver)
    {
        isVisible = true;
        selectedUserId = idReceiver;
        MessageText = string.Empty;
        Messages.Clear();
        ToUserId = idReceiver;
        var messageHistory = await ChatMessageService.GetChatMessages(FromUserId, ToUserId);

        foreach (var message in messageHistory)
        {
            Messages.Add(message);
        }

        ToUser = await AccountService.GetUserById(ToUserId);
        FromUser = await AccountService.GetUserById(FromUserId);

        hubConnection.Remove("ReceiveMessage");
        hubConnection.On<ChatMessageDto>("ReceiveMessage", async (message) =>
        {
            Console.WriteLine("hubConnection 1");

            if (message.IdUserSender == FromUserId ||
            (message.IdUserReceiver == FromUserId && message.IdUserSender == ToUserId))
            {
                Console.WriteLine("hubConnection 2");
                Messages.Add(message);
                await SetLeftMenu(FromUserId);
                StateHasChanged();
            }
        });
        if (hubConnection.State == HubConnectionState.Disconnected)
        {
            await hubConnection.StartAsync();
        }

        StateHasChanged();
        await module.InvokeVoidAsync("scrollOnBottomMessages");
    }

    public async Task Send()
    {
        ChatMessageDto message = new ChatMessageDto();
        message.IdUserReceiver = ToUserId;
        message.IdUserSender = FromUserId;
        message.Message = MessageText;

        try
        {
            var isTodaySeparatorUsed = false;
            var separators = Messages.Where(x => x.IsSeparator);
            foreach (var separator in separators)
            {
                @if (separator.DateSent == DateTime.Today)
                {
                    isTodaySeparatorUsed = true;
                }
            }

            @if (!isTodaySeparatorUsed)
            {
                ChatMessageDto separatorToday = new ChatMessageDto();
                separatorToday.Message = "Separator";
                separatorToday.DateSent = DateTime.Today;
                separatorToday.IsSeparator = true;

                Messages.Add(separatorToday);
            }

            await hubConnection.SendAsync("SendMessage", message);

            MessageAlert messageAlert = new MessageAlert(MessageAlertEnum.NewMessageChat, FromUser.UserName);
            List<string> listUsersIds = new List<string> { message.IdUserReceiver };

            if (await AlertService.IsOpenLastAlertFromChat(message.IdUserReceiver))
            {
                await AlertService.AddAlerts(listUsersIds, null, false, messageAlert);
            }

            Console.WriteLine("Wysłano wiadomość przez SignalR");
        }
        catch (Exception ex)
        {
            Console.WriteLine("Błąd wysyłania wiadomości SignalR: " + ex.Message);
        }

        MessageText = string.Empty;
    }

    private bool IsSelected(ChatLastMessageDto dto)
    {
        return selectedUserId == (dto.IdUserSender == FromUserId ? dto.IdUserReceiver : dto.IdUserSender);
    }
}

<style>
    .bold-text {
        font-weight: bold;
    }

    .chat-user-outer-container{
        height: calc(100vh - 155px);
        overflow: hidden;
        border-radius: 4px;
    }

    .chat-user-inner-scroll {
        overflow-y: auto;
        height: 100%;
        scrollbar-width: thin;
    }

    .chat-user {
        transition: background-color 0.3s ease, box-shadow 0.3s ease;
        white-space: normal;
        word-wrap: break-word;
        overflow-wrap: break-word;
    }      

    .chat-user:hover {
        box-shadow: 0px 4px 10px rgba(0, 0, 0, 0.2);
        background-color: var(--mud-palette-action-default-hover);
    }

    .chat-user:hover .mud-typography {
        color: #0a58ca !important;
    }

    .active-chat {
        background-color: rgba(33, 150, 243, 0.2) !important;
        border: 2px solid #2196F3 !important;
    }

    .active-chat .mud-typography {
        color: #1976D2 !important;
        font-weight: bold;
    }

    .chat-message-container {
        margin: 20px;
        height: calc(100vh - 200px);
        width: 100%;
        display: flex;
        flex-direction: column;
        justify-content: space-between;
        overflow: scroll;
        overflow-y: auto;
    }

    .mud-grid-spacing-xs-3 {
        width: calc(100% + 0px);
        margin: 0px;
    }

    .chat-messages {
        overflow: auto;
        margin-bottom: 20px;
        box-shadow: none;
    }

    .card-action-extra {
        flex-direction: column;
        align-items: flex-start;
    }

    .card-action-date {
        font-size: 11px;
    }

    .footer {
        
    }
</style>
