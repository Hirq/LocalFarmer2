@page "/chat"
@inject NavigationManager NavigationManager
@* @rendermode InteractiveWebAssemblyRenderMode  *@

<h3>Chat</h3>

@if (IsConnected)
{
    <input type="text" @bind="userInput" class="inputColor" />
    <input type="text" @bind="messageInput" class="inputColor" />
    <button @onclick="Send">Send</button>

    <ul id="messagesList">
        @foreach (var message in messages)
        {
            <li>@message</li>
        }
    </ul>
}
else
{
    <span>Connecting...</span>
}


@* 

Musimy zmienić ten chat dla 1 osoby + jak zapisywać te wiadomości na db?
Tak wykorzystamy db struktura
IdUserSender
IdUserReceiver
Message
Date

Dodatkowo użyjemy potem szyfrowania 
Szyfrowanie end-to-end (E2EE)
*@

@code {
    public ChatMessageDto dto = new ChatMessageDto()
    {
        Message = "string",
        IdUserReceiver = "53898801-370c-4fbc-a99c-86243f159fe5",
        IdUserSender = "8e339c44-2ccf-4e17-b774-626a7c9c8c1b"
    };

    private HubConnection hubConnection;
    private List<string> messages = new List<string>();
    private string userInput;
    private string messageInput;


    protected override async Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri("/chathub"))
            .Build();

        hubConnection.On<string, string>("ReceiveMessage", (user, message) =>
        {
            var encodedMsg = $"{user}: {message}";
            messages.Add(encodedMsg);
            StateHasChanged();
        });

        await hubConnection.StartAsync();
    }

    Task Send() => hubConnection.SendAsync("SendMessage", dto);

    public bool IsConnected => hubConnection.State == HubConnectionState.Connected;

}

<style>
    .inputColor{
        background-color: grey;
    }
</style>