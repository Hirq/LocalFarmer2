@page "/chat"
@inject NavigationManager NavigationManager
@inject UserStateService UserStateService
@inject IAccountService AccountService
@inject IChatMessageService ChatMessageService

<h3>Chat</h3>

<h3> USERS  ALL</h3>
@foreach (var user in users)
{
    <div>
        @user.UserName
        <button @onclick="() => GoPriv(user.Id)">Priv</button>
    </div>
}

<h3> USERS WITH HISTORY CHAT</h3>
@foreach (var dto in lastMessages)
{
    <div class="chat-user-container">
        <div>
            @dto.UserName
        </div>
        <div class="@(dto.IsLastMessageFromSender ? "bold-text" : "")">
            @dto.Message
        </div>
        <div>
            @(dto.IsLastMessageFromSender ? "tak" : "nie")
        </div>
        <button @onclick="() => GoPriv(dto.IdUserSender == idCurrnetUser ? dto.IdUserReceiver : dto.IdUserSender)">Priv</button>
    </div>
}
<h3> XXXXXXXXXXXXXXXXXX </h3>

<MudGrid>
    <MudItem xs="2">
        <MudPaper Class="d-flex mud-width-full py-8 flex-column">
            @foreach (var dto in lastMessages)
            {
                <MudCard Class="m-1 border-1"> 
                    <MudCardContent>
                        <MudText Typo="Typo.body2">@dto.UserName</MudText>
                        <MudText Typo="Typo.body2">@dto.FullName</MudText>
                    </MudCardContent>
                        <MudCardActions>
                            <MudText class="@(dto.IsLastMessageFromSender ? "bold-text" : "")">@dto.Message</MudText>
                    </MudCardActions>
                </MudCard>
            }
        </MudPaper>
    </MudItem>
    <MudItem xs="10">
        <MudPaper Class="d-flex align-center justify-center mud-width-full py-8">xs=6</MudPaper>
    </MudItem>
</MudGrid>



@code {
    private string idCurrnetUser;
    private List<ApplicationUser> usersWithHistory = new List<ApplicationUser>();
    private List<ChatLastMessageDto> lastMessages = new List<ChatLastMessageDto>();

    //Maybe to delete
    private List<ApplicationUser> users = new List<ApplicationUser>();

    protected override async Task OnInitializedAsync()
    {
        idCurrnetUser = UserStateService.CurrentUser?.IdUser;
        var chats = await ChatMessageService.GetUserChats(idCurrnetUser);

        var startI = chats.Where(x => x.User1Id != idCurrnetUser).Select(x => x.User1Id);
        var startYou = chats.Where(x => x.User2Id != idCurrnetUser).Select(x => x.User2Id);
        var usersIdsWithHistory = startI.Union(startYou).ToList();
        usersWithHistory = await AccountService.GetUsersByIds(usersIdsWithHistory);

        // var lastMessageFirstUser = await ChatMessageService.GetLastChatMessage(idCurrnetUser, usersWithHistory.First().Id);
        lastMessages = await ChatMessageService.GetLastChatMessages(idCurrnetUser, usersIdsWithHistory);

        foreach (var dto in lastMessages)
        {
            Console.WriteLine(dto.UserName);
            Console.WriteLine(dto.FullName);
            Console.WriteLine(dto.Message);
            Console.WriteLine(dto.IsLastMessageFromSender);
            Console.WriteLine("-----------");
        }

        //Maybe to delete
        users = (await AccountService.GetUsers()).Where(x => x.Id != UserStateService.CurrentUser?.IdUser).ToList();
    }

    void GoPriv(string idReceiver)
    {
        NavigationManager.NavigateTo($"/chatpriv/{idReceiver}");
    }
}

<style>
    .chat-user-container {
        display: flex;
        flex-direction: column;
    }

    .bold-text {
        font-weight: bold;
    }

    .chat-user-container2 {
        display: flex;
        flex-direction: column;
        background-color: darkgreen;
        padding: 10px;
    }

    .chat-user-message {
    }
</style>