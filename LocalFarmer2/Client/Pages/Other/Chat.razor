@page "/chat"
@inject NavigationManager NavigationManager
@inject UserStateService UserStateService
@inject IAccountService AccountService
@inject IChatMessageService ChatMessageService

<h3>Chat</h3>

<h3> USERS  ALL</h3>
@foreach (var user in users)
{
    <div>@user.UserName  
        <button @onclick="() => GoPriv(user.Id)">Priv</button>
    </div>
}

<h3> USERS WITH HISTORY CHAT</h3>
@foreach (var user in usersWithHistory)
{
    <div>
        @user.UserName
        <button @onclick="() => GoPriv(user.Id)">Priv</button>
    </div>
}

@code {
    private string idCurrnetUser;
    private List<ApplicationUser> usersWithHistory = new List<ApplicationUser>();

    //Maybe to delete
    private List<ApplicationUser> users = new List<ApplicationUser>();

    protected override async Task OnInitializedAsync()
    {
        idCurrnetUser = UserStateService.CurrentUser?.IdUser;
        var chats = await ChatMessageService.GetUserChats(idCurrnetUser);

        var startI = chats.Where(x => x.User1Id != idCurrnetUser).Select(x => x.User1Id);
        var startYou = chats.Where(x => x.User2Id != idCurrnetUser).Select(x => x.User2Id);
        var usersIdsWithHistory = startI.Union(startYou).ToList();
        usersWithHistory = await AccountService.GetUsersByIds(usersIdsWithHistory);

        //Maybe to delete
        users = (await AccountService.GetUsers()).Where(x => x.Id != UserStateService.CurrentUser?.IdUser).ToList();
    }

    void GoPriv(string idReceiver)
    {
        NavigationManager.NavigateTo($"/chatpriv/{idReceiver}");
    }
}