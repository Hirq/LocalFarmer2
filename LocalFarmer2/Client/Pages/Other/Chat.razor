@page "/chat"
@inject NavigationManager NavigationManager
@inject UserStateService UserStateService
@inject IAccountService AccountService
@* @rendermode InteractiveWebAssemblyRenderMode  *@

<h3>Chat</h3>

@if (IsConnected)
{
    <input type="text" @bind="userInput" class="inputColor" />
    <input type="text" @bind="messageInput" class="inputColor" />
    @* <button @onclick="Send">Send</button> *@

    <ul id="messagesList">
        @foreach (var message in messages)
        {
            <li>@message</li>
        }
    </ul>
}
else
{
    <span>Connecting...</span>
}

@foreach (var user in users)
{
    <div>@user.UserName  
        <button @onclick="() => Send(user.Id)">Send</button>
        <button @onclick="() => Send(user.Id)">History</button>
    </div>
}


@* 

Musimy zmienić ten chat dla 1 osoby + jak zapisywać te wiadomości na db?
Tak wykorzystamy db struktura
IdUserSender
IdUserReceiver
Message
Date

Dodatkowo użyjemy potem szyfrowania 
Szyfrowanie end-to-end (E2EE)
*@

@code {
    public ChatMessageDto dto = new ChatMessageDto()
    {
        Message = "string",
        IdUserReceiver = "53898801-370c-4fbc-a99c-86243f159fe5",
        IdUserSender = "8e339c44-2ccf-4e17-b774-626a7c9c8c1b"
    };

    private HubConnection hubConnection;
    private List<string> messages = new List<string>();
    private string userInput;
    private string messageInput;
    private List<ApplicationUser> users = new List<ApplicationUser>();


    protected override async Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri("/chathub"))
            .Build();

        hubConnection.On<string, string>("ReceiveMessage", (user, message) =>
        {
            var encodedMsg = $"{user}: {message}";
            messages.Add(encodedMsg);
            StateHasChanged();
        });

        await hubConnection.StartAsync();
        users = await AccountService.GetUsers();
        users = users.Where(x => x.Id != UserStateService.CurrentUser?.IdUser).ToList();
    }

    Task Send(string idReceiver)
    {
        dto.IdUserReceiver = idReceiver;
        return hubConnection.SendAsync("SendMessage", dto);
    }

    public bool IsConnected => hubConnection.State == HubConnectionState.Connected;

}

<style>
    .inputColor{
        background-color: grey;
    }
</style>