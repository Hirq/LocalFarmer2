@namespace LocalFarmer2.Client.Pages
@inject UtilsService UtilsService
@inject ValidateService ValidateService
@using System.Text

<MudDialog>
    <DialogContent>
        <p>@isContactToAdmin</p>
        <p>@emailTo</p>
        <MudTextField T="string" @ref="emailField" Label="Email" Required=@(!isContactToAdmin) RequiredError="@loc["Validation_Required"]" Variant="Variant.Text" @bind-Value="emailDto.From"></MudTextField>
        <MudTextField T="string" @ref="subjectField" Label="@loc["Farmhouse_Subject"]" Required RequiredError="@loc["Validation_Required"]" Variant="Variant.Text" @bind-Value="emailDto.Subject"></MudTextField>
        <MudTextField T="string" @ref="bodyField" Label="@loc["Farmhouse_Message"]" Required RequiredError="@loc["Validation_Required"]" Variant="Variant.Outlined" Lines="3" @bind-Value="emailDto.Body" Class="mt-4" />
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">@loc["X_Cancel"]</MudButton>
        <MudButton OnClick="SendMessage" Color="Color.Secondary" Variant="Variant.Filled">@loc["Farmhouse_Send"]</MudButton>
    </DialogActions>
</MudDialog>

    @code {
    [Parameter]
    public bool isContactToAdmin { get; set; }

    [Parameter]
    public string? emailTo { get; set; }

    [CascadingParameter] MudDialogInstance MudDialog { get; set; }

    private MudTextField<string> emailField;
    private MudTextField<string> subjectField;
    private MudTextField<string> bodyField;

    private EmailDto emailDto = new EmailDto()
    {
        From = "wpisujeswoj@gmail.com"
    };

    void Submit() => MudDialog.Close(DialogResult.Ok(true));
    void Cancel() => MudDialog.Cancel();

    async Task SendMessage()
    {
        var fieldsToValidate = new List<(object Field, string Value)>
        {
            (subjectField, emailDto.Subject),
            (bodyField, emailDto.Body),
        };

        if (!isContactToAdmin)
        {
            fieldsToValidate.Add((emailField, emailDto.From));
        }

        if (ValidateService.ValidateMudTextFields(fieldsToValidate))
        {
            return;
        }

        if (!string.IsNullOrEmpty(emailTo))
        {
            emailDto.To = emailTo;
        }
        
        await UtilsService.SendMessage(emailDto);
        Submit();
    }
}