@page "/settings"
@inject UserStateService UserStateService
@inject IAccountService AccountService
@inject IFarmhouseService FarmhouseService
@using System.Text.RegularExpressions
@using System.ComponentModel.DataAnnotations

<MudGrid>
    <MudItem xs="12">
        <MudText Class="d-flex justify-center" Typo="Typo.h6">Settings</MudText>
        @if (@currentUser?.IdFarmhouse != null)
        {
            <MudPaper Class="pa-4">
                <MudForm @ref="form" @bind-IsValid="@success" @bind-Errors="@errors">
                    <MudTextField T="string" Label="Farmhouse name" @bind-Value="farmhouse.Name" Required="true" RequiredError="Farmhouse name is required!" />
                    <MudTextField T="string" Label="Description" @bind-Value="farmhouse.Description" />
                    <MudTextField Label="Latitude" @bind-Value="farmhouse.Latitude" Required="true" RequiredError="Latitude is required!" />
                    <MudTextField Label="Longitude" @bind-Value="farmhouse.Longitude" Required="true" RequiredError="Longitude is required!" />
                </MudForm>
            </MudPaper>
        }
        <MudPaper Class="pa-4 mt-4">
            <MudButton Variant="Variant.Filled" Color="Color.Primary" DisableElevation="true" OnClick="@(()=>form.Validate())">Save</MudButton>
        </MudPaper>
    </MudItem>
</MudGrid>

@code {
    private UserDto? currentUser;
    private bool isUserSignUp;
    MudForm form;
    bool success;
    string[] errors = { };
    private Farmhouse farmhouse;
    //TODO: Poprawić format dla latitide i longitude

    protected async override Task OnInitializedAsync()
    {
        isUserSignUp = await AccountService.IsUserSignUp();

        if (isUserSignUp)
        {
            currentUser = await AccountService.GetCurrentUser();
            UserStateService.CurrentUser = currentUser;
            farmhouse = await FarmhouseService.GetFarmhouse((int)currentUser?.IdFarmhouse!);
        }
    }
}