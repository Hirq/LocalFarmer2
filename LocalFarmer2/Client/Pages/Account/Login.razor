@page "/login"
@inject IAccountService AuthService
@inject IAlertService AlertService
@inject NavigationManager NavigationManager
@inject UserStateService UserStateService

<PageTitle>@loc["Account_Login"] | @Globals.AppName</PageTitle>

<div class="mud-table-toolbar titlePage">
    <MudText Typo="Typo.h6">@loc["Account_Login"]</MudText>
</div>

<MudPaper Class="pa-4">
    <EditForm Model="loginModel"
              OnValidSubmit="HandleLogin"
              OnInvalidSubmit="HandleInvalidSubmit">

        <DataAnnotationsValidator />

        @if (AllErrors.Any())
        {
            <div class="alert alert-danger" role="alert">
                <ul>
                    @foreach (var error in AllErrors)
                    {
                        <li>@error</li>
                    }
                </ul>
            </div>
        }

        <div class="form-group">
            <label for="email">@loc["Account_Email_Address"]</label>
            <InputText Id="email" Class="form-control form-control-account" @bind-Value="loginModel.Email" />
        </div>
        <div class="form-group">
            <label for="password">@loc["Account_Password"]</label>
            <InputText Id="password" type="password" Class="form-control form-control-account" @bind-Value="loginModel.Password" />
        </div>
        <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary">@loc["Button_Submit"]</MudButton>
    </EditForm>
</MudPaper>

@code {
    private LoginDto loginModel = new LoginDto();
    private List<string> AllErrors = new();
    private string Error = "";

    protected override async Task OnInitializedAsync()
    {
        if (UserStateService.IsUserLogged)
        {
            NavigationManager.NavigateTo("/");
        }
    }

    private void ClearErrors()
    {
        AllErrors.Clear();
        Error = "";
    }

    private async Task HandleLogin()
    {
        ClearErrors();

        var result = await AuthService.Login(loginModel);

        if (result.Successful)
        {
            AlertService.SetSuccessAlert($"{@loc["Alert_Successfully"]} {@loc["Alert_Login"]}");
            NavigationManager.NavigateTo("/");
            _ = AlertService.ClearAlertAfterDelay();
        }
        else
        {
            Error = result.Error!;
            AllErrors.Add(Error);
        }
    }

    private void HandleInvalidSubmit(EditContext editContext)
    {
        ClearErrors();

        var messages = editContext
            .GetValidationMessages()
            .ToList();

        AllErrors.AddRange(messages);
    }
}