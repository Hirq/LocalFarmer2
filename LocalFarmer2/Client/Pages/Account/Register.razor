@page "/register"
@inject IAccountService AuthService
@inject IAlertService AlertService
@inject NavigationManager NavigationManager
@inject UserStateService UserStateService

<PageTitle>@loc["Account_Register"] | @Globals.AppName</PageTitle>

<div class="mud-table-toolbar titlePage">
    <MudText Typo="Typo.h6">@loc["Account_Register"]</MudText>
</div>

<MudPaper Class="pa-4">
    <EditForm Model="RegisterModel"
              OnValidSubmit="HandleRegistration"
              OnInvalidSubmit="HandleInvalidSubmit">

        <DataAnnotationsValidator />

        @if (AllErrors.Any())
        {
            <div class="alert alert-danger" role="alert">
                <ul>
                    @foreach (var error in AllErrors)
                    {
                        <li>@error</li>
                    }
                </ul>
            </div>
        }

        <div class="form-group">
            <label for="email">@loc["Account_Email_Address"]</label>
            <InputText Id="email" class="form-control form-control-account" @bind-Value="RegisterModel.Email" />
        </div>
        <div class="form-group">
            <label for="password">@loc["Account_Password"]</label>
            <InputText Id="password" type="password" class="form-control form-control-account" @bind-Value="RegisterModel.Password" />
        </div>
        <div class="form-group">
            <label for="passwordConfirm">@loc["Account_Password_Confirm"]</label>
            <InputText Id="passwordConfirm" type="password" class="form-control form-control-account" @bind-Value="RegisterModel.ConfirmPassword" />
        </div>
        <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary">@loc["Button_Submit"]</MudButton>
    </EditForm>
</MudPaper>

@code {
    private RegisterDto RegisterModel = new RegisterDto();
    private List<string> AllErrors = new List<string>();

    protected override async Task OnInitializedAsync()
    {
        if (UserStateService.IsUserLogged)
        {
            NavigationManager.NavigateTo("/");
        }
    }

    private void ClearErrors()
    {
        AllErrors.Clear();
    }

    private async Task HandleRegistration()
    {
        ClearErrors();
        var result = await AuthService.Register(RegisterModel);

        if (result.Successful)
        {
            var messageAlert = new MessageAlert(MessageAlertEnum.Welcome, "Welcome");
            var user = await AuthService.GetUser(result.Email!);
            List<string> listUsersIds = new List<string> { user.IdUser };
            await AlertService.AddAlerts(listUsersIds, null, false, messageAlert);
            AlertService.SetSuccessAlert($"{@loc["Alert_Successfully"]} {@loc["Alert_Create_Account"]}");

            NavigationManager.NavigateTo("/login");
            _ = AlertService.ClearAlertAfterDelay();
        }
        else
        {
            if (result.Errors != null)
            {
                AllErrors.AddRange(result.Errors);
            }
        }
    }

    private void HandleInvalidSubmit(EditContext editContext)
    {
        ClearErrors();

        var messages = editContext
            .GetValidationMessages()
            .ToList();

        AllErrors.AddRange(messages);
    }
}