@page "/myalerts"
@inherits BasePage
@inject IAlertService AlertService
@inject UserStateService UserStateService
@inject SearchService SearchService
@inject UtilsService UtilsService

<PageTitle>@loc["X_Alerts"] | @Globals.AppName</PageTitle>


@if (isLoading)
{
    <MudProgressCircular Class="m-4" Color="Color.Primary" />
}
else if (!string.IsNullOrEmpty(errorMessage))
{
    <MudAlert Severity="Severity.Error">@errorMessage</MudAlert>
}
else
{
    <div class="mud-table mud-xs-table mud-table-hover mud-elevation-1">
        <div class="mud-toolbar mud-toolbar-gutters mud-table-toolbar">
            <MudText Typo="Typo.h6">@loc["X_Alerts"]</MudText>
            <MudCheckBox T="bool?" TriState="true" Class="mr-2"
                         Checked="@GetAllCheckboxState()"
                         CheckedChanged="ToggleAll" />
            <MudButton Class="mr-2" Color="Color.Secondary" Variant="Variant.Filled" OnClick="@(() => DeleteAlerts())">@loc["X_Delete"]</MudButton>
            @if (FilterName == loc["Filter_All"])
            {
                <MudButton Class="mr-2" Color="Color.Success" Variant="Variant.Filled" OnClick="@(() => SetAlertsAsRead())">@loc["Alert_As_Read"]</MudButton>
            }
            <MudSpacer />
            <div class="mr-3">
                <MudButton Color="Color.Warning" Variant="Variant.Filled" Class="noteButtonFilter" OnClick="@(() => ChangeFilter())">@FilterName</MudButton>
                <div class="position-indicators">
                    <div class="indicator2 @(FilterNotes == 0 ? "active" : "")" onclick="@(() => SetFilter(0))"></div>
                    <div class="indicator2 @(FilterNotes == 1 ? "active" : "")" onclick="@(() => SetFilter(1))"></div>
                </div>
            </div>
            @* <MudButton Class="mr-2" Color="Color.Warning" Variant="Variant.Filled" OnClick="@(() => FilterNew())">@FilterName</MudButton> *@
            <MudTextField @bind-Value="SearchService.SearchString" Placeholder="@loc["X_Search"]" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0 input-search"></MudTextField>
        </div>
        <MudExpansionPanels MultiExpansion="true">
            @foreach (var group in ListAlert.Where(a => UtilsService.FilterFunc(a, SearchService.SearchString)).GroupBy(a => a.AlertEnum))
            {
                <MudExpansionPanel>
                    <TitleContent>
                        <div class="d-flex">
                            <MudCheckBox T="bool?" TriState="true" Class="mr-2"
                                         Checked="@GetGroupCheckboxState(group.Key)"
                                         CheckedChanged="@((bool? value) => ToggleGroup(group.Key, value))" />
                            <MudText><b>@GetAlertName(@group.Key)</b></MudText>
                            <MudChip Color="Color.Primary" Size="Size.Small" Class="ml-2">@group.Count()</MudChip>
                        </div>
                    </TitleContent>
                    <ChildContent>
                        <MudList Clickable="true">
                            @foreach (var alert in group.OrderByDescending(a => a.DateCreated))
                            {
                                var details = GetAlertDetails(alert.AlertEnum);
                                <MudListItem Icon="@details.Icon" IconColor="@details.Color">
                                    <div class="d-flex justify-space-between w-100">
                                        <div class="d-flex align-center">
                                            <MudCheckBox Class="mr-2" Checked="@IsSelected(alert.Id)" CheckedChanged="@((bool value) => ToggleAlert(alert.Id, value))" />
                                            <span>@alert.Message</span>
                                        </div>
                                        <MudText Typo="Typo.caption">@alert.DateCreated.ToString("g")</MudText>
                                    </div>
                                </MudListItem>
                            }
                        </MudList>
                    </ChildContent>
                </MudExpansionPanel>
            }
        </MudExpansionPanels>
    </div>
}
@code {
    List<Alert> ListAlert = new List<Alert>();
    List<Alert> originalListAlert = new List<Alert>();
    HashSet<int> selectedAlertIds = new HashSet<int>();

    bool isNewFilterActive = false;
    private int FilterNotes = 0;
    private string FilterName = string.Empty;
    /*
    0 - All
    1 - Only Favorite
    */

    protected override async Task LoadDataAsync()
    {
        if (!await EnsureLoggedInAsync())
        {
            return;
        }

        await PrepareAlertLists();
        FilterName = loc["Filter_All"];
    }

    private async Task PrepareAlertLists()
    {
        ListAlert = await AlertService.GetAllForUser(UserStateService.CurrentUser.IdUser, UserStateService.CurrentUser.IdFarmhouse);
        ListAlert = ListAlert.OrderByDescending(a => a.DateCreated).ToList();
        originalListAlert = ListAlert;
    }

    private (string Icon, Color Color) GetAlertDetails(MessageAlertEnum alertEnum)
    {
        return alertEnum switch
        {
            MessageAlertEnum.FarmhouseIsOpen => (Icons.Material.Filled.Store, Color.Info),
            MessageAlertEnum.NewProduct => (Icons.Material.Filled.AddShoppingCart, Color.Success),
            MessageAlertEnum.EditProduct => (Icons.Material.Filled.Edit, Color.Default),
            MessageAlertEnum.EditDetails => (Icons.Material.Filled.EditNote, Color.Default),
            MessageAlertEnum.NewSubscriber => (Icons.Material.Filled.PersonAdd, Color.Primary),
            MessageAlertEnum.NewOpinion => (Icons.Material.Filled.Star, Color.Warning),
            _ => (Icons.Material.Filled.Notifications, Color.Default)
        };
    }

    private string GetAlertName(MessageAlertEnum alertEnum)
    {
        var name = alertEnum switch
        {
            MessageAlertEnum.FarmhouseIsOpen => $"{loc["Alert_IsOpen_Farmhouse"]}",
            MessageAlertEnum.NewProduct => $"{loc["Alert_Add_Product"]}",
            MessageAlertEnum.EditProduct => $"{loc["Alert_Edit_Product"]}",
            MessageAlertEnum.EditDetails => $"{loc["Alert_Edit_Farmhouse"]}",
            MessageAlertEnum.NewSubscriber => $"{loc["Alert_Add_Subscribe"]}",
            MessageAlertEnum.NewOpinion => $"{loc["Alert_Add_Opinion"]}",
            _ => $"{loc["Alert_Others"]}"
        };

        return name.CapitalizeFirst();
    }

    private void ChangeFilter()
    {
        FilterNotes = (FilterNotes + 1) % 2;
        isNewFilterActive = !isNewFilterActive;

        if (isNewFilterActive)
        {
            ListAlert = originalListAlert.Where(x => !x.IsOpen).ToList();
            FilterName = loc["Filter_New"];
        }
        else
        {
            ListAlert = originalListAlert;
            FilterName = loc["Filter_All"];
        }
    }

    private void SetFilter(int filtr)
    {
        FilterNotes = filtr;
        ChangeFilter();
    }

    private IEnumerable<Alert> GetVisibleAlerts()
    {
        return ListAlert.Where(a => UtilsService.FilterFunc(a, SearchService.SearchString));
    }

    private bool IsSelected(int alertId)
    {
        return selectedAlertIds.Contains(alertId);
    }

    private void ToggleAlert(int alertId, bool isChecked)
    {
        if (isChecked)
            selectedAlertIds.Add(alertId);
        else
            selectedAlertIds.Remove(alertId);
    }

    private bool? GetGroupCheckboxState(MessageAlertEnum groupKey)
    {
        var alerts = GetVisibleAlerts().Where(a => a.AlertEnum == groupKey).Select(a => a.Id).ToList();
        if (alerts.Count == 0) return false;

        var selectedCount = alerts.Count(id => selectedAlertIds.Contains(id));
        if (selectedCount == 0) return false;
        if (selectedCount == alerts.Count) return true;
        return null;
    }

    private void ToggleGroup(MessageAlertEnum groupKey, bool? value)
    {
        var alerts = GetVisibleAlerts().Where(a => a.AlertEnum == groupKey).Select(a => a.Id).ToList();
        if (value == true || value == null)
        {
            foreach (var id in alerts)
                selectedAlertIds.Add(id);
        }
        else
        {
            foreach (var id in alerts)
                selectedAlertIds.Remove(id);
        }
    }

    private bool? GetAllCheckboxState()
    {
        var alerts = GetVisibleAlerts().Select(a => a.Id).ToList();
        if (alerts.Count == 0) return false;

        var selectedCount = alerts.Count(id => selectedAlertIds.Contains(id));
        if (selectedCount == 0) return false;
        if (selectedCount == alerts.Count) return true;
        return null;
    }

    private void ToggleAll(bool? value)
    {
        var alerts = GetVisibleAlerts().Select(a => a.Id).ToList();
        if (value == true || value == null)
        {
            foreach (var id in alerts)
                selectedAlertIds.Add(id);
        }
        else
        {
            foreach (var id in alerts)
                selectedAlertIds.Remove(id);
        }
    }

    private async Task SetAlertsAsRead()
    {
        var ids = selectedAlertIds.ToArray();
        await AlertService.SetAlertsAsRead(ids);
        selectedAlertIds.Clear();
        await PrepareAlertLists();
    }

    private async Task DeleteAlerts()
    {
        var ids = selectedAlertIds.ToArray();
        await AlertService.DeleteAlerts(ids);
        selectedAlertIds.Clear();
        await PrepareAlertLists();
    }
}
