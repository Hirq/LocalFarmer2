@page "/myalerts"
@inject IAlertService AlertService
@inject UserStateService UserStateService
@inject SearchService SearchService
@inject UtilsService UtilsService

<PageTitle>@loc["X_Alerts"] | @Globals.AppName</PageTitle>

<div class="mud-toolbar mud-toolbar-gutters mud-table-toolbar">
    <MudText Typo="Typo.h6">@loc["X_Alerts"]</MudText>
    <MudSpacer />
    <MudTextField @bind-Value="SearchService.SearchString" Placeholder="@loc["X_Search"]" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0 input-search"></MudTextField>
</div>

@if (ListAlert == null)
{
    <MudProgressCircular Indeterminate="true"></MudProgressCircular>
}
else
{
    <MudExpansionPanels MultiExpansion="true">
        @foreach (var group in ListAlert.Where(a => UtilsService.FilterFunc(a, SearchService.SearchString)).GroupBy(a => a.AlertEnum))
        {
            <MudExpansionPanel>
                <TitleContent>
                    <div class="d-flex">
                        <MudText><b>@GetAlertName(@group.Key)</b></MudText>
                        <MudChip Color="Color.Primary" Size="Size.Small" Class="ml-2">@group.Count()</MudChip>
                    </div>
                </TitleContent>
                <ChildContent>
                    <MudList Clickable="true">
                        @foreach (var alert in group.OrderByDescending(a => a.DateCreated))
                        {
                            var details = GetAlertDetails(alert.AlertEnum);
                            <MudListItem Icon="@details.Icon" IconColor="@details.Color">
                                <div class="d-flex justify-space-between w-100">
                                    <span>@alert.Message</span>
                                    <MudText Typo="Typo.caption">@alert.DateCreated.ToString("g")</MudText>
                                </div>
                            </MudListItem>
                        }
                    </MudList>
                </ChildContent>
            </MudExpansionPanel>
        }
    </MudExpansionPanels>
}

@code {
    List<Alert> ListAlert = new List<Alert>();

    protected override async Task OnInitializedAsync()
    {
        ListAlert = await AlertService.GetAllForUser(UserStateService.CurrentUser.IdUser, UserStateService.CurrentUser.IdFarmhouse);
        ListAlert = ListAlert.OrderByDescending(a => a.DateCreated).ToList();
    }

    private (string Icon, Color Color) GetAlertDetails(MessageAlertEnum alertEnum)
    {
        return alertEnum switch
        {
            MessageAlertEnum.FarmhouseIsOpen => (Icons.Material.Filled.Store, Color.Info),
            MessageAlertEnum.NewProduct => (Icons.Material.Filled.AddShoppingCart, Color.Success),
            MessageAlertEnum.EditProduct => (Icons.Material.Filled.Edit, Color.Default),
            MessageAlertEnum.EditDetails => (Icons.Material.Filled.EditNote, Color.Default),
            MessageAlertEnum.NewSubscriber => (Icons.Material.Filled.PersonAdd, Color.Primary),
            MessageAlertEnum.NewOpinion => (Icons.Material.Filled.Star, Color.Warning),
            MessageAlertEnum.NewMessageChat => (Icons.Material.Filled.Chat, Color.Info),
            _ => (Icons.Material.Filled.Notifications, Color.Default)
        };
    }

    private string GetAlertName(MessageAlertEnum alertEnum)
    {
        var name = alertEnum switch
        {
            MessageAlertEnum.FarmhouseIsOpen => $"{loc["Alert_IsOpen_Farmhouse"]}",
            MessageAlertEnum.NewProduct => $"{loc["Alert_Add_Product"]}",
            MessageAlertEnum.EditProduct => $"{loc["Alert_Edit_Product"]}",
            MessageAlertEnum.EditDetails => $"{loc["Alert_Edit_Farmhouse"]}",
            MessageAlertEnum.NewSubscriber => $"{loc["Alert_Add_Subscribe"]}",
            MessageAlertEnum.NewOpinion => $"{loc["Alert_Add_Opinion"]}",
            MessageAlertEnum.NewMessageChat => $"{loc["Alert_Message"]}",
            _ => $"{loc["Alert_Others"]}"
        };

        return name.CapitalizeFirst();
    }
}
