@inherits LayoutComponentBase
@inject AlertService alertService
@* @inject UtilsService utilsService *@
@inject UserStateService UserStateService
@inject IAccountService AccountService
@inject IJSRuntime JSRuntime

<MudThemeProvider />
<MudDialogProvider />
<MudSnackbarProvider />
@if (isDataInitialized)
{
    <MudLayout>
        <MudAppBar>
            <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start" OnClick="@((e) => DrawerToggle())" />
            <MudSpacer />
            <AuthorizeView>
                <MudIconButton Icon="@Icons.Material.Outlined.Notifications" Color="Color.Inherit" />
                @* <MudAvatar Color="Color.Secondary" Size="Size.Medium" Class="avatar">JK</MudAvatar> *@
                <MudMenu AnchorOrigin="Origin.BottomRight" Icon="@Icons.Material.Outlined.MoreVert" TransformOrigin="Origin.TopRight" Color="Color.Inherit">
                    @if (UserStateService.CurrentUser?.IdFarmhouse != null)
                    {
                        <MudMenuItem Href="/editfarmhouse">Edit farmhouse</MudMenuItem>
                        <MudMenuItem Href="/myaccount">My account</MudMenuItem>
                    }
                    else
                    {
                        <MudMenuItem Href="/addfarmhouse">Set farmhouse</MudMenuItem>
                        <MudMenuItem Href="/myaccount">My account</MudMenuItem>
                    }
                </MudMenu>
            </AuthorizeView>
        </MudAppBar>
        <MudDrawer @bind-Open="@_drawerOpen">
            <NavMenu />
        </MudDrawer>
        <MudMainContent>
            @if (alertService.IsSuccessAlert)
            {
                <MudAlert Severity="Severity.Success" ContentAlignment="HorizontalAlignment.Center" Variant="Variant.Filled" ShowCloseIcon="true" CloseIconClicked="() => CloseAlertSuccess()">@alertService.Text </MudAlert>
            }
            @if (alertService.IsDeleteAlert)
            {
                <MudAlert Severity="Severity.Error" ContentAlignment="HorizontalAlignment.Center" Variant="Variant.Filled" ShowCloseIcon="true" CloseIconClicked="() => CloseAlertDelete()">@alertService.Text </MudAlert>
            }
            @Body
        </MudMainContent>
    </MudLayout>
}
@code {
    bool _drawerOpen = true;
    private bool isDataInitialized = false;

    void DrawerToggle()
    {
        _drawerOpen = !_drawerOpen;
    }

    private void CloseAlertSuccess()
    {
        alertService.IsSuccessAlert = false;
    }

    private void CloseAlertDelete()
    {
        alertService.IsDeleteAlert = false;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (alertService.IsSuccessAlert || alertService.IsDeleteAlert)
        {
            alertService.IsSuccessAlert = false;
            alertService.IsDeleteAlert = false;
            await JSRuntime.InvokeVoidAsync("closeAlertAfterDelay");
        }
        Console.WriteLine("Zawsze???");

    }

    protected override async Task OnInitializedAsync()
    {
        Console.Write("1");
        if (!isDataInitialized)
        {
            Console.WriteLine("SRART");

            if (await AccountService.IsUserSignUp())
            {
                Console.WriteLine("IFFF");

                UserStateService.IsUserLogged = true;
                UserStateService.CurrentUser = await AccountService.GetCurrentUser();
            }
            else
            {
                Console.WriteLine("elseee");

                UserStateService.IsUserLogged = false;
            }
            Console.WriteLine("KONIEC");

            isDataInitialized = true;
        }
    }
}