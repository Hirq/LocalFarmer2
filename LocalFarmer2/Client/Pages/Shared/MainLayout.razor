@inherits LayoutComponentBase
@inject UserStateService UserStateService
@inject IAlertService AlertService
@inject IAccountService AccountService
@inject IJSRuntime JSRuntime

<MudThemeProvider @bind-IsDarkMode="@isDarkMode" Theme="@MainTheme" />
<MudDialogProvider />
<MudSnackbarProvider />

@if (isDataInitialized)
{
    <MudLayout>
        <MudAppBar>
            <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start" OnClick="@((e) => DrawerToggle())" />
            <MudSpacer />
            <MudSwitch @bind-Checked="@isDarkMode"
                        ThumbIcon="@(!isDarkMode ? @Icons.Material.Filled.LightMode : Icons.Material.Filled.ModeNight)"
                        ThumbIconColor="@(!isDarkMode ? Color.Warning : Color.Primary)"
                        onclick="@(() =>ToggleTheme())" />
            <AuthorizeView>
                <div class="cursor-pointer">
                    @if(newAlerts > 0)
                    {
                        <MudBadge id="badge" Content="@newAlerts" Color="Color.Error" Overlap="true" Class="mx-6 my-4">
                        <MudMenu AnchorOrigin="Origin.BottomRight" Icon="@Icons.Material.Outlined.Notifications" TransformOrigin="Origin.TopRight" Color="Color.Inherit" IsOpenChanged="MenuStateChanged" MaxHeight="400">
                            <MudText Typo="Typo.h6" Align="Align.Center">@loc["X_Alerts"]</MudText>
                            <MudTooltip Text="Open history">
                                <MudMenuItem Avatar="@Icons.Material.Filled.History" Href="/myalerts">@loc["Alert_All_Alerts"]</MudMenuItem>
                            </MudTooltip>
                            <MudDivider DividerType="DividerType.Middle" Style="height: 3px" />
                            @foreach (var alert in alerts)
                            {
                                <MudMenuItem>@alert.Message</MudMenuItem>
                            }
                        </MudMenu>
                        </MudBadge>
                    }
                    else
                    {
                        <MudMenu AnchorOrigin="Origin.BottomRight" Icon="@Icons.Material.Outlined.Notifications" TransformOrigin="Origin.TopRight" Color="Color.Inherit" MaxHeight="400">
                            <MudText Typo="Typo.h6" Align="Align.Center">@loc["X_Alerts"]</MudText>
                            <MudTooltip Text="Open history">
                                <MudMenuItem Avatar="@Icons.Material.Filled.History" Href="/myalerts">@loc["Alert_All_Alerts"]</MudMenuItem>
                            </MudTooltip>
                            @if(alerts.Count > 0)
                            {
                                <MudDivider DividerType="DividerType.Middle" Style="height: 3px" />
                            }
                            @foreach (var alert in alerts)
                            {
                                <MudMenuItem>@alert.Message</MudMenuItem>
                            }
                        </MudMenu>
                    }
                </div>
                @* <MudAvatar Color="Color.Secondary" Size="Size.Medium" Class="avatar">JK</MudAvatar> *@
                <MudMenu AnchorOrigin="Origin.BottomRight" Icon="@Icons.Material.Outlined.MoreVert" TransformOrigin="Origin.TopRight" Color="Color.Inherit">
                    @if (UserStateService.CurrentUser?.IdFarmhouse != null)
                    {
                        <MudMenuItem Href="/editfarmhouse">@loc["Farmhouse_Edit_Farmhouse"]</MudMenuItem>
                        <MudMenuItem Href="/myaccount">@loc["Account_My_Account"]</MudMenuItem>
                    }
                    else
                    {
                        <MudMenuItem Href="/addfarmhouse">@loc["Farmhouse_Add_Farmhouse"]</MudMenuItem>
                        <MudMenuItem Href="/myaccount">@loc["Account_My_Account"]</MudMenuItem>
                    }
                </MudMenu>
            </AuthorizeView>
        </MudAppBar>
        <MudDrawer @bind-Open="@_drawerOpen">
            <NavMenu />
        </MudDrawer>
        <MudMainContent>
            @if (AlertService.IsSuccessAlert)
            {
                <MudAlert Severity="Severity.Success" ContentAlignment="HorizontalAlignment.Center" Variant="Variant.Filled" ShowCloseIcon="true" CloseIconClicked="() => CloseAlertSuccess()">@AlertService.Text </MudAlert>
            }
            @if (AlertService.IsDeleteAlert)
            {
                <MudAlert Severity="Severity.Error" ContentAlignment="HorizontalAlignment.Center" Variant="Variant.Filled" ShowCloseIcon="true" CloseIconClicked="() => CloseAlertDelete()">@AlertService.Text </MudAlert>
            }
            @Body
        </MudMainContent>
    </MudLayout>
}

@code {
    bool _drawerOpen = true;
    string nameApp = "asd";
    private bool isDataInitialized = false;
    int newAlerts = 0;
    List<Alert> alerts = new List<Alert>();
    private bool isDarkMode;
    private MudThemeProvider mudThemeProvider;
    private MudTheme MainTheme = new MudTheme
    {
        Palette = new PaletteLight
        {
            // Primary = Colors.Blue.Default,
            // Background = "#fff",
            // Surface = "#f0f0f0"
            Warning = Colors.Yellow.Darken2
        },

        PaletteDark = new PaletteDark
        {
            Warning = Colors.Indigo.Darken2
        }
    };

    protected override async Task OnInitializedAsync()
    {
        var result = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "isDarkMode");
        if (result != null && bool.TryParse(result, out var parsedResult))
        {
            isDarkMode = parsedResult;
            UpdateBodyClass(isDarkMode); // Ustaw odpowiednią klasę na <body>
        }

        AlertService.OnAlert += OnAlertChanged;
        if (!isDataInitialized)
        {
            if (await AccountService.IsUserSignUp())
            {
                UserStateService.IsUserLogged = true;
                UserStateService.CurrentUser = await AccountService.GetCurrentUser();
                alerts = await AlertService.GetAllForUser(UserStateService.CurrentUser.IdUser, UserStateService.CurrentUser.IdFarmhouse);
                newAlerts = alerts.Where(x => !x.IsOpen).Count();
            }
            else
            {
                UserStateService.IsUserLogged = false;
            }
            isDataInitialized = true;
        }
    }

    private async Task MenuStateChanged(bool isOpen)
    {
        Console.WriteLine("1:" + isOpen);
        Console.WriteLine("2:" + UserStateService.CurrentUser.IdUser);
        if (!isOpen)
        {
            await AlertService.SetAllAlertsAsReadForUser(UserStateService.CurrentUser.IdUser);
            newAlerts = 0;
        }
    }

    void DrawerToggle()
    {
        _drawerOpen = !_drawerOpen;
    }

    private async Task ToggleTheme()
    {
        isDarkMode = !isDarkMode;
        UpdateBodyClass(isDarkMode);
        await JSRuntime.InvokeVoidAsync("localStorage.setItem", "isDarkMode", isDarkMode.ToString());
    }

    private async void UpdateBodyClass(bool isDark)
    {
        if (isDark)
        {
            await JSRuntime.InvokeVoidAsync("document.body.classList.add", "dark-mode");
        }
        else
        {
            await JSRuntime.InvokeVoidAsync("document.body.classList.remove", "dark-mode");
        }
    }

    private void CloseAlertSuccess()
    {
        AlertService.IsSuccessAlert = false;
    }

    private void CloseAlertDelete()
    {
        AlertService.IsDeleteAlert = false;
    }

    private void OnAlertChanged()
    {
        InvokeAsync(StateHasChanged);
    }

    public void Dispose()
    {
        AlertService.OnAlert -= OnAlertChanged;
    }
}